{"type":"group","name":"starwraith engineer combat implant","enabled":true,"id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"// Changelog\n// 20190113T1503EST: Copied main system to separate class systems\n\n// Place any code here you'd like to autorun when the system is loaded\nsend_command('wakeup')\nSECI = {\n// Core Implant Code\n    noticecolor: 'gold',\n    packagename: 'starwraith engineer combat implant',\n    shortname: 'SECI',\n    notice: function(text) {\n        display_notice(\"[\" + this.shortname + \"] \" + text, this.noticecolor);\n    },\n    loaded: function() {\n        //Send implant to browser log for debugging\n        console.log(this)\n        this.notice(\"Starwraith Engineer Combat Implant v1.0 Loaded. Good hunting, and good death.\\n\");\n    },\n    helpbox: function(title,text) {\n        var helptext = \"<div class=\\\"mono\\\"><span style=\\\"color: #ffffff; \\\"><span style=\\\"background-color: #0000a0 \\\">\" + title + \"</span></span></div>\";\n        helptext += \"<div class=\\\"mono\\\">\" + text.replace(\"\\n\",\"</div><div class=\\\"mono\\\">\") + \"</div>\";\n        client.display_help_window(helptext);\n    },\n    disableGroup: function(name) {\n        var group = reflex_find_by_name('group', name, false, false, this.packagename)\n        reflex_disable(group)\n    },\n    enableGroup: function(name) {\n        var group = reflex_find_by_name('group', name, false, false, this.packagename)\n        reflex_enable(group)\n    },\n    log: function (x, fgcolor, bgcolor) {\n        let type = typeof x\n        switch(type) {\n          case 'number':\n          case 'string':\n          case 'boolean':\n            display_notice(x.toString(), fgcolor, bgcolor)\n            break;\n          case 'object':\n            for (var prop in x) {\n              display_notice(`${prop}: ${x[prop]}`, fgcolor, bgcolor)\n            }\n            break;\n          case 'undefined':\n            display_notice('undefined', fgcolor, bgcolor)\n            break;\n          default:\n            display_notice('wtf is this')\n        }\n    },\n    alert: function (text, fgcolor, bgcolor) {\n        text = text.toUpperCase()\n        let fullText = '-'.repeat(text.length+1) + '-------\\n--  '+ text + '  --\\n-------' + '-'.repeat(text.length+1)\n        display_notice(fullText, fgcolor, bgcolor)\n    },\n    debugMessage: function (text) {\n        if (get_variable('debug')) {\n            this.log(text, 'white', 'black')\n        }\n    },\n//System Variables\n    goal: 'hunt2',\n    matchList: get_variable('matchList'),\n    systemEnabled: true,\n    offenseEnabled: false,\n    break: get_variable('break'),\n    itemsInRoom: [],\n    damageThisFight: 0,\n    ttk: 0,\n    targetHealth: 0,\n    interrupt: false,\n//Character    \n    attack: get_variable('huntingAttack') + ' ',\n    class: '',\n    health: 0,\n    maxHealth: 0,\n    useHeal: get_variable('useHeal'),\n    healReady: true,\n//Engineer\n    parts: 0,\n    repeat: true,\n    wormDeployed: false,\n//Combat functions \n    findTarget: function() {\n        var itemList = this.itemsInRoom\n        var killList = get_variable('killList')\n        var targetFound = false\n        \n        //Match room order\n        if (!this.matchList) {\n            for (i=0; i<itemList.length; i++) {\n                for (x=0; x<killList.length; x++) {\n                    if (itemList[i].name.includes(killList[x]) && itemList[i].attrib === 'm' && targetFound === false) {\n                        set_variable('tar', itemList[i].id)\n                        send_command('settarget ' + itemList[i].id)\n                        targetFound = true\n                        display_notice('New target: '+itemList[i].name, 'red', 'black')\n                    }\n                }\n            }\n        } else { //Match priority/list order\n            for (i=0; i<killList.length; i++) {\n                for (x=0; x<itemList.length; x++) {\n                    if (itemList[x].name.includes(killList[i]) && itemList[x].attrib === 'm' && targetFound === false) {\n                        set_variable('tar', itemList[x].id)\n                        send_command('settarget ' + itemList[x].id)\n                        targetFound = true\n                        display_notice('New target: '+itemList[x].name, 'red', 'black')\n                    }\n                }\n            }\n        }\n\n        if (!targetFound) {\n            //display_notice('No Target Found', 'red', 'black')\n            set_variable('tar', '')\n        }\n    },\n    huntingAttack: function() {\n        \n        if (!this.systemEnabled) {return}\n        var command = ''\n        \n        //Engineer\n        if (this.health / this.maxHealth < .8 && this.healReady && this.useHeal) {\n            this.debugMessage('Activating stimjector')\n            send_command('operate stimjector')\n                \n        }else if (get_variable('tar') == '' || this.offenseEnabled == false) {\n            return;\n                \n        }else if (!this.repeat && get_variable('useRepeat') && get_variable('repeatAttack') != '') {\n            this.debugMessage('Initiating repeat')\n            command =  'bot repeat '\n            command += get_variable('engineerRepeatAttack')\n            command += ' '\n\n        } else if (get_variable('useWorm') && this.targetHealth > 0.7 && !this.wormDeployed) {\n            this.debugMessage('Executing burrowbot worm attack')\n            command = 'bot worm '\n\n        } else if (get_variable('useRelease') && this.wormDeployed && this.targetHealth < 0.3) {\n            this.debugMessage('Releasing burrowbot')\n            command = 'bot release '\n        } else {\n            this.debugMessage('Executing default engineer attack')\n            command = 'bot claw '\n        }\n            \n        this.debugMessage('Attempting command: ' + command) \n        command += get_variable('tar')\n        send_command(command)\n    }\n}\n\nSECI.loaded();","items":[]},{"type":"function","name":"onGMCP","enabled":true,"id":3,"code":"// Place any code here you'd like to run when a GMCP message is received\n// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"\n\nGMCP[args.gmcp_method] = args.gmcp_args\n\n/* ------------------------------------------ CHARACTER STUFF ----------------------------------- */\n\nif (args.gmcp_method == \"Char.Vitals\") {\n\n    // Track health changes\n    var change = SECI.health - args.gmcp_args.hp;\n   \n    if (change > 0) {\n        SECI.log('Damage taken: ' + change, 'yellow')\n    } else if (change < 0) {\n        SECI.log('Damage healed: ' + Math.abs(change), '#6bdaee')\n    }\n    \n    SECI.health = args.gmcp_args.hp\n    SECI.maxHealth = args.gmcp_args.maxhp\n\n    // Engineer\n    SECI.parts = args.gmcp_args.pt\n}\n\n/* ----------------------------------- DEFENCES AND BUFFS --------------------------------------- */\n\n//if (args.gmcp_method == 'Char.Defences.Add') {\n    //if (args.gmcp_args.name == 'Oblivion: Conqueror')  {\n    //    SECI.empyreal = 'Conqueror'\n    //}\n//}\n\n/* -------------------------------------------- ITEMS IN ROOM ----------------------------------- */\n\n//Get Items In Room\nif (args.gmcp_method == \"Char.Items.List\") {\n    SECI.itemsInRoom = args.gmcp_args['items']\n}\n\n//Remove items when items leave\nif (args.gmcp_method == \"Char.Items.Remove\") {\n    let itemLeaving = args.gmcp_args['item']\n    \n    //Find index of item\n    SECI.itemsInRoom = SECI.itemsInRoom.filter(item => item.id !== itemLeaving.id);\n    \n}\n\n//Add items when items enter\nif (args.gmcp_method == \"Char.Items.Add\") {\n    let itemJoining = args.gmcp_args['item']\n    \n    //Find index of item\n    SECI.itemsInRoom.push(itemJoining);\n    \n    if (SECI.systemEnabled === true && !get_variable('tar')) {\n        SECI.findTarget()\n    }\n}\n\n/* -------------------------------------------- PLAYERS IN ROOM ----------------------------------- */\nif (args.gmcp_method == \"Room.Players\") {\n    SECI.playersInRoom = args.gmcp_args\n}\n\n/* --------------------------------------------- HELPERS --------------------------------- */\nif (args.gmcp_method == \"Room.Info\") {\n    if (SECI.systemEnabled === true) {\n        SECI.findTarget()\n    }\n}\n\nif (args.gmcp_method == \"IRE.Target.Info\") {\n    SECI.targetHealth = args.gmcp_args['hpperc'].slice(0, -1)\n}\n","items":[]},{"type":"group","name":"Auto Hunt","enabled":true,"id":8,"items":[{"type":"group","name":"Setup","enabled":true,"id":41,"items":[{"type":"alias","name":"Combat Implant Setup - hsetup","enabled":true,"id":25,"matching":"begins","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"SECI.log('-- Hunting List Setup.  Use \\'hsave\\' to keep a backup.  \\'hload\\' will load your backup.', 'white', 'black')\nSECI.log('-- Use \\'hadd\\' <name> to add to the list and \\'hremove\\' <name> to remove items from this list. \\'hshow\\' will show the items on your list.', 'white', 'black')\nSECI.log('-- Use \\'hattack\\' <attackName> to make it your primary attack that will be auto used.', 'white')\nSECI.log('-- Use \\'hlist\\' to switch between room and priority list. Use \\'hup\\' or \\'hdown\\' <name> to increase or decrease an item on the priority list.', 'white')\nSECI.log('-- Make sure you use \\'config usequeueing on\\'.  Then you can use other attacks to overwrite auto attacks.', 'white')\n\nif (get_variable('killList')       == undefined) {set_variable('killList', ['rockhopper'])}\nif (get_variable('debug')          == undefined) {set_variable('debug', false)}\nif (get_variable('matchList')      == undefined) {set_variable('matchList', true)}\nif (get_variable('break')          == undefined) {set_variable('break', true)}\nif (get_variable('useHeal')        == undefined) {set_variable('useHeal', true)}\nif (get_variable('useFreeze')      == undefined) {set_variable('useFreeze', false)}\nif (get_variable('useMultistrike') == undefined) {set_variable('useMultistrike', false)}\nif (get_variable('useFrenzy')      == undefined) {set_variable('useFrenzy', false)}\nif (get_variable('useDelay')       == undefined) {set_variable('useDelay', false)}\nif (get_variable('useBerserk')     == undefined) {set_variable('useBerserk', false)}\nif (get_variable('useFever')       == undefined) {set_variable('useFever', false)}\nif (get_variable('useAmbush')      == undefined) {set_variable('useAmbush', false)}\nif (get_variable('useRapidfire')   == undefined) {set_variable('useRapidfire', false)}"}],"text":"hsetup","items":[]},{"type":"alias","name":"System Reset","enabled":true,"id":126,"matching":"regexp","whole_words":false,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"SECI.log('-- Combat Implant has been reset to factory settings.', 'white', 'black')\nSECI.log('-- If you have previously backed up your kill list you may use \\'hload\\' to reload it', 'white', 'black')\n\nset_variable('killList', ['rockhopper'])\nset_variable('debug', false)\nset_variable('useFreeze', false)\nset_variable('useMultistrike', false)\nset_variable('useFrenzy', false)\nset_variable('useDelay', false)\nset_variable('useBerserk', false)\nset_variable('useFever', false)\nset_variable('useAmbush', false)\nset_variable('useRapidfire', false)\nset_variable('useHeal', true)\nset_variable('matchList', true)\nset_variable('break', true)"}],"text":"^hreset$","items":[]},{"type":"alias","name":"Change Auto Attack","enabled":true,"id":26,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"SECI.attack = args[1] + ' '\nset_variable('huntingAttack', args[1] + ' ')\ndisplay_notice('Attack set to: ' + args[1], 'white', 'black')"}],"text":"hattack (.+)","items":[]},{"type":"alias","name":"Enable/Disable List Mode - hlist","enabled":true,"id":56,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('matchList')) {\n    SECI.matchList = false\n    set_variable('matchList', false)\n    SECI.log('Will match room listing', 'white')\n} else {\n    SECI.matchList = true\n    set_variable('matchList', true)\n    SECI.log('Will match priority listing', 'white')\n}"}],"text":"hlist","items":[]},{"type":"alias","name":"Enable/Disable Break After Kill Mode - hbreak","enabled":true,"id":82,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('break')) {\n    SECI.break = false\n    set_variable('break', false)\n    SECI.log('Will continue after kill.', 'white')\n} else {\n    SECI.break = true\n    set_variable('break', true)\n    SECI.log('Will break after kill.', 'white')\n}"}],"text":"hbreak","items":[]},{"type":"alias","name":"Enable/Disable Break Threshold","enabled":true,"id":169,"matching":"regexp","whole_words":false,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"set_variable('breakThreshold', args[1])\nSECI.breakThreshold = args[1]"}],"text":"^hbreakthreshold ([0-9]*)$"}],"actions":[]},{"type":"trigger","name":"Slain","enabled":true,"id":5,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(You) have slain a.*$|^.*has been slain by (.+)\\.$","actions":[{"action":"script","script":"SECI.freeze = false\nSECI.frenzy = false\nSECI.negation = false\nSECI.delaySwarm = false\nSECI.fever = false\nSECI.hypertension = false\nSECI.ambush = false\nSECI.backhand = false\n\n//var a = new Audio('https://freesound.org/people/adcbicycle/sounds/13934/download/13934__adcbicycle__6.wav')\n//a.play()\n\nvar autoList = ['You', 'Chronoxi Starwraith', 'Feraluna Starwraith', 'Mee', 'Casimar', 'Albion', 'Mykel']\nvar onList = ''\n\nif (args[1]) {\n    onList = autoList.includes(args[1])\n} else {\n    onList = autoList.includes(args[2])\n}\n\nif (SECI.systemEnabled === true && onList) {\n    SECI.targetHealth = 0\n    send_command('clearqueue')\n    SECI.findTarget()\n\n    if (SECI.class == 'Engineer' && get_variable('useQPCBoost')) {\n        send_command('qpcboost')\n    }\n\n    if (SECI.break) {\n        SECI.offenseEnabled = false\n    }\n    \n    SECI.huntingAttack()\n}\n\nvar slainMessage = ''\nvar now = new Date()\nif (SECI.damageThisFight > 0 && SECI.ttk > 0){\n    slainMessage = SECI.damageThisFight + ' damage done this fight. | TTK: ' + (now.getTime() - SECI.ttk)/1000 + 's | DPS: ' + Math.round(SECI.damageThisFight / ((now.getTime() - SECI.ttk)/1000))\n} else if (SECI.damageThisFight > 0) {\n    slainMessage = SECI.damageThisFight + ' damage done this fight.'\n} else if (SECI.ttk > 0) {\n    slainMessage = 'TTK: ' + (now.getTime() - SECI.ttk)/1000 + 's'\n}\n\nif (SECI.damageThisFight > 0 || SECI.ttk > 0){\n    SECI.alert(slainMessage, 'lightgreen', 'darkblue')\n}\n\nSECI.ttk = 0\nSECI.damageThisFight = 0\nSECI.interrupt = false"}],"items":[]},{"type":"trigger","name":"Crash - AUTO OFF","enabled":true,"id":18,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You prepare to crash out of the room.*$|^\\[Queue\\]: You will attempt to do CRASH .{1,4} when you recover balance.$","actions":[{"action":"script","script":"SECI.systemEnabled = false\ndisplay_notice('AUTO OFF', 'white', 'black')"}],"items":[]},{"type":"keybind","name":"","enabled":true,"id":10,"key":96,"actions":[{"action":"script","script":"if (get_variable('debug') == true) {SECI.log('I am attacking ' + get_variable('tar'), 'white')}\nSECI.systemEnabled = true\nSECI.offenseEnabled = true\nSECI.huntingAttack()"}],"key_alt":false,"key_ctrl":false,"key_shift":false,"items":[]},{"type":"keybind","name":"","enabled":true,"id":32,"key":111,"actions":[{"action":"script","script":"if (SECI.systemEnabled === true) {\n  SECI.systemEnabled = false\n  display_notice(\"Combat implant disabled\", 'white', 'black')\n} else {\n  SECI.systemEnabled = true\n  display_notice(\"Combat implant enabled\", 'white', 'black')\n}"}],"key_alt":false,"key_ctrl":false,"key_shift":false,"items":[]},{"type":"alias","name":"Heal","enabled":true,"id":115,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (SECI.class == 'Nanoseer') {\n  send_command('NANO REPAIR')\n} else if (SECI.class == 'Fury') {\n  send_command('KITH SUFFUSE')\n} else if (SECI.class == 'Scoundrel') {\n  send_command('STIM')\n} else if (SECI.class == 'B.E.A.S.T.') {\n  send_command('suit support')\n} else if (SECI.class == 'Engineer') {\n  send_command('operate stimjector')\n}"}],"text":"h","items":[]},{"type":"alias","name":"Add to hunting list - hadd <mob>","enabled":true,"id":13,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"display_notice('Adding: ' + args[1] + ' to list', 'white', 'black')\nlet newList = get_variable('killList')\nnewList.push(args[1])\nset_variable('killList', newList)"}],"text":"hadd (.+)","items":[]},{"type":"alias","name":"Remove from hunting list - hremove <mob>","enabled":true,"id":14,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"display_notice('Removing: ' + args[1] + ' from list', 'white', 'black')\n\nlet newList = get_variable('killList')\nnewList = newList.filter(item => item !== args[1]);\n\nset_variable('killList', newList)"}],"text":"hremove (.+)","items":[]},{"type":"alias","name":"Save Hunting List To Backup - hsave","enabled":true,"id":15,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"let newSave = get_variable('killList')\nset_variable('killListBackup', newSave)\ndisplay_notice('Hunt List Saved', 'white', 'black')\n"}],"text":"hsave","items":[]},{"type":"alias","name":"Load Hunting List From Backup - hload","enabled":true,"id":16,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"let backupList = get_variable('killListBackup')\nset_variable('killList', backupList)\ndisplay_notice('Hunt List Loaded from Backup', 'white', 'black')"}],"text":"hload","items":[]},{"type":"alias","name":"Show Hunting Targets - hshow","enabled":true,"id":17,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"let killList = get_variable('killList')\nfor (i=0; i<killList.length; i++) {\n    display_notice(killList[i], 'white', 'black')\n}"}],"text":"hshow","items":[]},{"type":"alias","name":"Item Priority - hup/hdown <mob>","enabled":true,"id":52,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var list = get_variable('killList')\nvar nameIndex = list.indexOf(args[2])\nvar name = list[nameIndex]\n\nif (list[nameIndex-1] && nameIndex && args[1] === 'hup') {\n    list[nameIndex] = list[nameIndex - 1]\n    list[nameIndex-1] = name\n} else if (list[nameIndex+1] && nameIndex && args[1] === 'hdown') {\n    list[nameIndex] = list[nameIndex + 1]\n    list[nameIndex+1] = name\n}\n\nset_variable('killList', list)\n\nfor (i=0; i<list.length; i++) {\n    if(list[i] === name){\n        display_notice(list[i], 'gold', 'black')\n    } else {\n        display_notice(list[i])\n    }\n}"}],"text":"^(hup|hdown) (.+)$","items":[]},{"type":"alias","name":"Heal Toggle - hheal","enabled":true,"id":81,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('useHeal')) {\n    set_variable('useHeal', false)\n    SECI.useHeal = false\n    SECI.log('HEAL OFF', 'white')\n} else {\n    set_variable('useHeal', true)\n    SECI.useHeal = true\n    SECI.log('HEAL ON', 'white')\n}"}],"text":"hheal","items":[]},{"type":"alias","name":"Kill","enabled":true,"id":120,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('debug') == true) {SECI.log('I am attacking ' + get_variable('tar'), 'white')}\nSECI.systemEnabled = true\nSECI.offenseEnabled = true\nSECI.huntingAttack()"}],"text":"k","items":[]}],"actions":[]},{"type":"group","name":"Generic","enabled":true,"id":4,"items":[{"type":"group","name":"Interrupts","enabled":true,"id":147,"items":[{"type":"trigger","name":"Super - Interrupt","enabled":true,"id":148,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^Throwing back its grizzled head, a sly cania lets out a high-pitched, wavering howl.$|^A sluggish atzaparaki shakes off some of its torpor and draws in a deep breath, its sides beginning to swell alarmingly.$|^Light begins to focus deep within the body of a salt-crusted quartz creeper, growing to an almost painful radiance.$","actions":[{"action":"script","script":"SECI.interrupt = true\n\nSECI.alert('interrupting super', 'white', 'blue')\nSECI.huntingAttack()\n"}],"items":[]}],"actions":[]},{"type":"group","name":"Travel","enabled":true,"id":149,"items":[{"type":"trigger","name":"Battlemaster Engineer Return","enabled":true,"id":125,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"A tripod-mounted wormhole generator has been set up in the center of the cracked landing pad.","actions":[{"action":"linkify","linkify":"match","linkify_backref":"1","linkify_text_type":"capture","linkify_text":"","linkify_command_type":"value","linkify_command":"turn tripod&push tripod","linkify_color":"#26aa95"}],"items":[]},{"type":"trigger","name":"Battlemaster Engineer Omni","enabled":true,"id":124,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"A tripod-mounted wormhole generator has been set up in the center of the repair bay.","actions":[{"action":"linkify","linkify":"match","linkify_backref":"1","linkify_text_type":"capture","linkify_text":"","linkify_command_type":"value","linkify_command":"turn tripod&push tripod","linkify_color":"#26aa95"}],"items":[]}],"actions":[]},{"type":"trigger","name":"Left battle","enabled":true,"id":6,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You are no longer in the throes of battle.","actions":[{"action":"highlight","highlight":"match","highlight_backref":"1","highlight_fg":"#9488f6","highlight_bg":"#000000"}],"items":[]},{"type":"trigger","name":"Hide Queue","enabled":false,"id":7,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^\\[Queue\\]: You will attempt to do.*$|^Your swarm is already focused upon a multistrike.*$","actions":[{"action":"gag"}],"items":[]},{"type":"trigger","name":"Add Damage Per Kill","enabled":true,"id":57,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"Damage Dealt: (.+) .+","actions":[{"action":"script","script":"if (SECI.ttk == 0) {\n    var now = new Date()\n    SECI.ttk = now.getTime()\n}\nSECI.damageThisFight += parseInt(args[1])"},{"action":"highlight","highlight":"match","highlight_backref":"1","highlight_fg":"#ff0000","highlight_bg":"#000000"}],"items":[]},{"type":"trigger","name":"Not following","enabled":true,"id":87,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"(.+) is no longer following you.","actions":[{"action":"script","script":"SECI.log(args[1] + ' Stopped Following!', 'darkred')"}],"items":[]},{"type":"alias","name":"Crash + Direction - c<dir>","enabled":true,"id":33,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"send_command('cq')\nsend_command('crash ' + args[1])"}],"text":"c(nw|ne|se|sw|n|s|e|w|u|d|in|out)","items":[]},{"type":"alias","name":"Javascript - js","enabled":true,"id":31,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"SECI.log(eval(args[1]))"}],"text":"^js (.+)$","items":[]}],"actions":[]},{"type":"group","name":"Engineer","enabled":true,"id":109,"items":[{"type":"group","name":"Turret Construction","enabled":true,"id":129,"items":[{"type":"alias","name":"Construct Turret","enabled":true,"id":128,"matching":"regexp","whole_words":false,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"if (args[1] == '' || args[2] == '') {\n    SECI.log('Usage: hturret <mod> <weapon> <follow up command>', 'darkyellow')\n} else {\n    set_variable('turretMod', args[1])\n    set_variable('turretWeapon', args[2])\n    set_variable('turretFollowup', args[3])\n    set_variable('turretAlias', true)\n    send_command('turret construct turret')\n}\n"}],"text":"hturret ([a-z]+) ([a-z]+)[ ]?(.*)","items":[]},{"type":"trigger","name":"Frame Constructed","enabled":true,"id":130,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^Circuitboards, robotic servos, power sources, and an operating system come together under your capable hands to form a modular weapons turret","actions":[{"action":"script","script":"if (get_variable('turretAlias') == true) {\n    send_command('turret install ' + get_variable('turretWeapon'))\n}"}],"items":[]},{"type":"trigger","name":"Weapon Mounted","enabled":true,"id":131,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^Smoothly, you socket the .* barrel|That barrel is already installed on the turret","actions":[{"action":"script","script":"if (get_variable('turretAlias') != true) {return;}\n\nif (get_variable('turretMod').toUpperCase() == 'QPC') {\n    send_command('gadget construct qpc')\n} else {\n    send_command('turret mod ' + get_variable('turretMod'))\n    if (get_variable('turretFollowup') != '') {send_command(get_variable('turretFollowup'))}\n    set_variable('turretAlias', false)\n    SECI.log('Turret ready!', 'white')\n}"}],"items":[]},{"type":"trigger","name":"Mod Mounted","enabled":true,"id":133,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^Metal ratchets satisfyingly into place and code whirrs down","actions":[{"action":"script","script":"if (get_variable('turretAlias') != true) {return;}\nsend_command(get_variable('turretFollowup'))\nset_variable('turretAlias', false)\nSECI.log('Turret ready!', 'white')"}],"items":[]},{"type":"trigger","name":"QPC Ready","enabled":true,"id":132,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^Using your vast engineering knowledge, you effortlessly construct a cylindrical quantum power cell","actions":[{"action":"script","script":"if (get_variable('turretAlias') != true) {\n    return;\n} else if (get_variable('turretMod').toUpperCase() == 'QPC') {\n    send_command('turret mod qpc')\n}"}],"items":[]},{"type":"alias","name":"Deploy Sentry Turret","enabled":true,"id":134,"matching":"regexp","whole_words":false,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"send_command('turret deploy ' + args[1])"},{"action":"waitfor","text":"Dropping a turret with a mounted flamethrower barrel","matching":"substring","whole_words":false,"case_sensitive":false,"expire":"10"},{"action":"command","command":"workstation deploy","prefix_suffix":false},{"action":"waitfor","text":"You fold down the legs of your workstation","matching":"substring","whole_words":false,"case_sensitive":false,"expire":"10"},{"action":"command","command":"turret sentrymode","prefix_suffix":true},{"action":"waitfor","text":"Fingers whirring across the holokeyboard","matching":"substring","whole_words":false,"case_sensitive":false,"expire":"10"},{"action":"command","command":"workstation pack","prefix_suffix":true}],"text":"^deploysentry[ ]?([0-9]*)$","items":[]}],"actions":[]},{"type":"group","name":"Utility","enabled":true,"id":136,"items":[{"type":"trigger","name":"Airdrop Return","enabled":true,"id":123,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^An aerodynamic drone flies in, decelerating rapidly. It drops a supply of spare parts into your hands.$","actions":[{"action":"highlight","highlight":"line","highlight_backref":"1","highlight_fg":"#00c7ff","highlight_bg":"#000000"},{"action":"script","script":"if (get_variable('refillParts') == true) {\n    if (SECI.parts < 60) {\n        send_command('bot airdrop')\n    } else {\n        set_variable('refillParts', false)\n    }\n}"}],"items":[]},{"type":"alias","name":"Refill Parts","enabled":true,"id":127,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"set_variable('refillParts', true)\nsend_command('bot airdrop')\n"}],"text":"^hfillParts$","items":[]}],"actions":[]},{"type":"trigger","name":"Stimjector Used","enabled":true,"id":111,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You activate your stimjector, feeling a rush of vitality as it releases healing nanites into your bloodstream.","actions":[{"action":"script","script":"SECI.healReady = false"}],"items":[]},{"type":"trigger","name":"Stimjector Ready","enabled":true,"id":112,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You can again use a stimjector.","actions":[{"action":"script","script":"SECI.healReady = true\nSECI.huntingAttack()\n//SECI.log('stimjector ready', 'cyan')"},{"action":"highlight","highlight":"line","highlight_backref":"1","highlight_fg":"#00efff","highlight_bg":"#000000"}],"items":[]},{"type":"trigger","name":"Repeat Active","enabled":true,"id":137,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^You build an instruction loop","actions":[{"action":"script","script":"SECI.repeat = false\nSECI.huntingAttack()"}],"items":[]},{"type":"trigger","name":"Repeat Available","enabled":true,"id":138,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^You can again order a repeated attack.$","actions":[{"action":"script","script":"SECI.repeat = true"},{"action":"highlight","highlight":"line","highlight_backref":"1","highlight_fg":"#fbbe80","highlight_bg":"#000000"}],"items":[]},{"type":"trigger","name":"Burrowbot Active","enabled":true,"id":139,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"and starts burrowing into its flesh.$","actions":[{"action":"script","script":"SECI.wormDeployed = true\nSECI.huntingAttack()"}],"items":[]},{"type":"trigger","name":"Burrowbot Returned","enabled":true,"id":140,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^A knife-mawed burrowbot violently emerges|ceases burrowing","actions":[{"action":"script","script":"SECI.wormDeployed = false\nSECI.huntingAttack()"}],"items":[]},{"type":"trigger","name":"Queue Attack Engineer","enabled":true,"id":114,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^A crane-armed carrybot claws .* shredding .* skin.$","actions":[{"action":"script","script":"SECI.huntingAttack()"}],"items":[]},{"type":"trigger","name":"Turret Unpowered","enabled":true,"id":150,"matching":"regexp","whole_words":false,"case_sensitive":true,"text":"doesn't have enough power to attack.$","actions":[{"action":"highlight","highlight":"line","highlight_backref":"1","highlight_fg":"#f863df","highlight_bg":"#000000"}]},{"type":"alias","name":"List Ability Configuration","enabled":true,"id":113,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var abilities = ''\nabilities += 'Heal:          ' + get_variable('useHeal') + '\\n'\nabilities += 'Repeat Attack: ' + get_variable('engineerRepeatAttack') + '\\n'\nabilities += 'Use Repeat:    ' + get_variable('useRepeat') + '\\n'\nabilities += 'Repeat Avail:  ' + SECI.repeat + '\\n'\nabilities += 'Use Worm:      ' + get_variable('useWorm') + '\\n'\nabilities += 'Worm Deployed: ' + SECI.wormDeployed + '\\n'\nabilities += 'Use Release:   ' + get_variable('useRelease') + '\\n'\nabilities += 'QPC Boost:     ' + get_variable('useQPCBoost') + '\\n'\n\nSECI.log(abilities, 'white')"}],"text":"hengineer","items":[]},{"type":"alias","name":"Enable/Disable Repeat","enabled":true,"id":135,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (args[1] != 'clear') {\n    set_variable('engineerRepeatAttack', args[1])\n    set_variable('useRepeat', true)\n    SECI.log('Enabled bot repeat with attack: ' + args[1], 'white')\n} else {\n    set_variable('engineerRepeatAttack', '')\n    set_variable('useRepeat', false)\n    SECI.log('Disabled bot repeat command', 'white')\n}"}],"text":"hrepeat (.+)","items":[]},{"type":"alias","name":"Enable/Disable Worm","enabled":true,"id":141,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('useWorm')) {\n    set_variable('useWorm', false)\n    SECI.log('Burrowbot Worm Attack disabled', 'white')\n} else {\n    set_variable('useWorm', true)\n    SECI.log('Burrowbot Worm Attack enabled', 'white')\n}"}],"text":"hworm","items":[]},{"type":"alias","name":"Enable/Disable Worm Release","enabled":true,"id":142,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('useRelease')) {\n    set_variable('useRelease', false)\n    SECI.log('Burrowbot Worm Release Attack disabled', 'white')\n} else {\n    set_variable('useRelease', true)\n    SECI.log('Burrowbot Worm Release Attack enabled', 'white')\n}"}],"text":"hrelease","items":[]},{"type":"alias","name":"Enable/Disable QPCBoost","enabled":true,"id":151,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('useQPCBoost')) {\n    set_variable('useQPCBoost', false)\n    SECI.log('QPC Boost after kill disabled', 'white')\n} else {\n    set_variable('useQPCBoost', true)\n    SECI.log('QPC Boost after kill enabled', 'white')\n}"}],"text":"hqpcboost"}],"actions":[]},{"type":"group","name":"Combat","enabled":true,"id":64,"items":[{"type":"group","name":"Chat","enabled":true,"id":65,"items":[{"type":"alias","name":"Target call - tt <name>","enabled":false,"id":67,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"SECI.target = args[1]\nset_variable('tar', args[1])\nsend_command('st ' + args[1])\nsend_command('crt Target: ' + args[1])"}],"text":"tt (.+)","items":[]}],"actions":[]}],"actions":[]}],"description":"SECI v1.2"}