{
    "type": "group",
    "name": "starwraith nanoseer combat implant",
    "enabled": true,
    "id": 1,
    "items": [
        {
            "type": "function",
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "// Changelog
// 20190113T1503EST: Copied main system to separate class systems

// Place any code here you'd like to autorun when the system is loaded
send_command('wakeup')

SNCI = {
// Core Implant Code
    noticecolor: 'gold',
    packagename: 'starwraith nanoseer combat implant',
    shortname: 'SNCI',
    notice: function(text) {
        display_notice(\"[\" + this.shortname + \"] \" + text, this.noticecolor);
    },
    loaded: function() {
        //Send implant to browser log for debugging
        console.log(this)
        this.notice(\"Starwraith Nanoseer Combat Implant v1.0 Loaded. Good hunting, and good death.\\n\");
    },
    helpbox: function(title,text) {
        var helptext = \"<div class=\\\"mono\\\"><span style=\\\"color: #ffffff; \\\"><span style=\\\"background-color: #0000a0 \\\">\" + title + \"</span></span></div>\";
        helptext += \"<div class=\\\"mono\\\">\" + text.replace(\"\\n\",\"</div><div class=\\\"mono\\\">\") + \"</div>\";
        client.display_help_window(helptext);
    },
    disableGroup: function(name) {
        var group = reflex_find_by_name('group', name, false, false, this.packagename)
        reflex_disable(group)
    },
    enableGroup: function(name) {
        var group = reflex_find_by_name('group', name, false, false, this.packagename)
        reflex_enable(group)
    },
    log: function (x, fgcolor, bgcolor) {
        let type = typeof x
        switch(type) {
          case 'number':
          case 'string':
          case 'boolean':
            display_notice(x.toString(), fgcolor, bgcolor)
            break;
          case 'object':
            for (var prop in x) {
              display_notice(`${prop}: ${x[prop]}`, fgcolor, bgcolor)
            }
            break;
          case 'undefined':
            display_notice('undefined', fgcolor, bgcolor)
            break;
          default:
            display_notice('wtf is this')
        }
    },
    alert: function (text, fgcolor, bgcolor) {
        text = text.toUpperCase()
        let fullText = '-'.repeat(text.length+1) + '-------\\n--  '+ text + '  --\\n-------' + '-'.repeat(text.length+1)
        display_notice(fullText, fgcolor, bgcolor)
    },
    debugMessage: function (text) {
        if (get_variable('debug')) {
            this.log(text, 'white', 'black')
        }
    },
//System Variables
    goal: 'hunt2',
    matchList: get_variable('matchList'),
    systemEnabled: true,
    offenseEnabled: false,
    break: get_variable('break'),
    itemsInRoom: [],
    damageThisFight: 0,
    ttk: 0,
    targetHealth: 0,
    interrupt: false,
//Character    
    attack: get_variable('huntingAttack') + ' ',
    class: '',
    health: 0,
    maxHealth: 0,
    useHeal: get_variable('useHeal'),
    healReady: true,
//Nano
    nanites: 0,
    maxNanites: 0,
    sanity: 0,
    maxSanity: 0,
    multistrike: false,
    frenzy: false,
    freeze: false,
    delaySwarm: false,
    pointZero: false,
    speedup: false,
    negation: false,
    empyreal: '',
    useDelay: get_variable('useDelay'),
    useMultistrike: get_variable('useMultistrike'),
    useFrenzy: get_variable('useFrenzy'),
    usePointZero: get_variable('usePointZero'),
    useSpeedup: get_variable('useSpeedup'),
    useFreeze: get_variable('useFreeze'),
    useNegation: get_variable('useNegation'),
//Combat functions 
    findTarget: function() {
        var itemList = this.itemsInRoom
        var killList = get_variable('killList')
        var targetFound = false
        
        //Match room order
        if (!this.matchList) {
            for (i=0; i<itemList.length; i++) {
                for (x=0; x<killList.length; x++) {
                    if (itemList[i].name.includes(killList[x]) && itemList[i].attrib === 'm' && targetFound === false) {
                        set_variable('tar', itemList[i].id)
                        send_command('settarget ' + itemList[i].id)
                        targetFound = true
                        display_notice('New target: '+itemList[i].name, 'red', 'black')
                    }
                }
            }
        } else { //Match priority/list order
            for (i=0; i<killList.length; i++) {
                for (x=0; x<itemList.length; x++) {
                    if (itemList[x].name.includes(killList[i]) && itemList[x].attrib === 'm' && targetFound === false) {
                        set_variable('tar', itemList[x].id)
                        send_command('settarget ' + itemList[x].id)
                        targetFound = true
                        display_notice('New target: '+itemList[x].name, 'red', 'black')
                    }
                }
            }
        }

        if (!targetFound) {
            //display_notice('No Target Found', 'red', 'black')
            set_variable('tar', '')
        }
    },
    huntingAttack: function() {
        
        if (!this.systemEnabled) {return}
        var command = ''
        
        //Self heal
        if (this.health / this.maxHealth < .8 && this.healReady && this.useHeal) {
            this.debugMessage('Nano repair')
            send_command('nano repair')
            return
                
        //Out of combat buffs
        //Casting and channeling are separated to enable the buff to be executed
        //immediately if already channeling one of the required empyreals
        //This prevents unnecessary swapping of empyreal channels after combat
        } else if (!this.negation && this.useNegation && this.empyreal == 'Progenitor') {
            this.debugMessage('Cast Negation')
            send_command('negation')
            return
                
        } else if (!this.frenzy && this.useFrenzy && this.empyreal == 'Conqueror') {
            this.debugMessage('Cast Frenzy')
            send_command('frenzy')
            return
                
        } else if (!this.frenzy && this.useFrenzy && this.empyreal != 'Conqueror') {
            this.debugMessage('Channel conqueror')
            send_command('oblivion channel conqueror')
            return
                
        } else if (!this.negation && this.useNegation && this.empyreal != 'Progenitor') {
            this.debugMessage('Channel Progenitor')
            send_command('oblivion channel progenitor')
            return
                
        //Abort execution of offensive actions if disabled
        } else if (!this.offenseEnabled || get_variable('tar') == '') {
            this.debugMessage('No target or offense disabled')
            return
                
        //Combat buffs
        } else if (!this.speedup && this.useSpeedup && this.empyreal != 'Traveller') {
            this.debugMessage('Channel Traveller')
            send_command('oblivion channel Traveller')
            return
                
        } else if (!this.speedup && this.useSpeedup && this.empyreal == 'Traveller') {
            this.debugMessage('Cast Speedup')
            send_command('speedup')
            return
                
        } else if (!this.pointZero && this.usePointZero) {
            this.debugMessage('Point Zero')
            send_command('void pointzero')
            return
                
        } else if (!this.delaySwarm && this.useDelay) {
            this.debugMessage('Delay Attack')
            command =  'delay '
            command += get_variable('delayAttack')
            command += ' '
             
        } else if (!this.multistrike && this.targetHealth > 40 && this.useMultistrike) {
            this.debugMessage('Multistrike')
            command = 'multistrike '
                
        } else if (!this.freeze && this.useFreeze && this.targetHealth > 20 ) {
            this.debugMessage('Freeze')
            command = 'freeze '
                
        } else {
            this.debugMessage('Default Attack')
            command = this.attack + ' '
        }
           
        command += get_variable('tar')
        send_command(command)          
    }
}

SNCI.loaded();",
            "items": []
        },
        {
            "type": "function",
            "name": "onGMCP",
            "enabled": true,
            "id": 3,
            "code": "// Place any code here you'd like to run when a GMCP message is received
// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"

GMCP[args.gmcp_method] = args.gmcp_args

/* ------------------------------------------ CHARACTER STUFF ----------------------------------- */

if (args.gmcp_method == \"Char.Vitals\") {

    // Track health changes
    var change = SNCI.health - args.gmcp_args.hp;
   
    if (change > 0) {
        SNCI.log('Damage taken: ' + change, 'yellow')
    } else if (change < 0) {
        SNCI.log('Damage healed: ' + Math.abs(change), '#6bdaee')
    }
    
    SNCI.health = args.gmcp_args.hp
    SNCI.maxHealth = args.gmcp_args.maxhp

    SNCI.nanites = args.gmcp_args.nn
    SNCI.maxNanites = args.gmcp_args.maxnn
    SNCI.sanity = args.gmcp_args.xa
    SNCI.maxSanity = args.gmcp_args.maxsa
}

/* ----------------------------------- DEFENCES AND BUFFS --------------------------------------- */

if (args.gmcp_method == 'Char.Defences.Add') {
    //Nanoseer
    if (args.gmcp_args.name == 'Oblivion: Conqueror')  {
        SNCI.empyreal = 'Conqueror'
    } else if (args.gmcp_args.name == 'Oblivion: Traveller')  {
        SNCI.empyreal = 'Traveller'
    } else if (args.gmcp_args.name == 'Oblivion: Architect')  {
        SNCI.empyreal = 'Architect'
    } else if (args.gmcp_args.name == 'Oblivion: Progenitor') {
        SNCI.empyreal = 'Progenitor'
    } else if (args.gmcp_args.name == 'Oblivion: Sunderer')   {
        SNCI.empyreal = 'Sunderer'
    }
}

/* -------------------------------------------- ITEMS IN ROOM ----------------------------------- */

//Get Items In Room
if (args.gmcp_method == \"Char.Items.List\") {
    SNCI.itemsInRoom = args.gmcp_args['items']
}

//Remove items when items leave
if (args.gmcp_method == \"Char.Items.Remove\") {
    let itemLeaving = args.gmcp_args['item']
    
    //Find index of item
    SNCI.itemsInRoom = SNCI.itemsInRoom.filter(item => item.id !== itemLeaving.id);
}

//Add items when items enter
if (args.gmcp_method == \"Char.Items.Add\") {
    let itemJoining = args.gmcp_args['item']
    
    //Find index of item
    SNCI.itemsInRoom.push(itemJoining);
    
    if (SNCI.systemEnabled === true && !get_variable('tar')) {
        SNCI.findTarget()
    }
}

/* -------------------------------------------- PLAYERS IN ROOM ----------------------------------- */
if (args.gmcp_method == \"Room.Players\") {
    SNCI.playersInRoom = args.gmcp_args
}

/* --------------------------------------------- HELPERS --------------------------------- */
if (args.gmcp_method == \"Room.Info\") {
    if (SNCI.systemEnabled === true) {
        SNCI.findTarget()
    }
}

if (args.gmcp_method == \"IRE.Target.Info\") {
    SNCI.targetHealth = args.gmcp_args['hpperc'].slice(0, -1)
}",
            "items": []
        },
        {
            "type": "group",
            "name": "Auto Hunt",
            "enabled": true,
            "id": 8,
            "items": [
                {
                    "type": "group",
                    "name": "Setup",
                    "enabled": true,
                    "id": 41,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Combat Implant Setup - hsetup",
                            "enabled": true,
                            "id": 25,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.log('-- Hunting List Setup.  Use \\'hsave\\' to keep a backup.  \\'hload\\' will load your backup.', 'white', 'black')
SNCI.log('-- Use \\'hadd\\' <name> to add to the list and \\'hremove\\' <name> to remove items from this list. \\'hshow\\' will show the items on your list.', 'white', 'black')
SNCI.log('-- Use \\'hattack\\' <attackName> to make it your primary attack that will be auto used.', 'white')
SNCI.log('-- Use \\'hlist\\' to switch between room and priority list. Use \\'hup\\' or \\'hdown\\' <name> to increase or decrease an item on the priority list.', 'white')
SNCI.log('-- Make sure you use \\'config usequeueing on\\'.  Then you can use other attacks to overwrite auto attacks.', 'white')

if (get_variable('killList')       == undefined) {set_variable('killList', ['rockhopper'])}
if (get_variable('debug')          == undefined) {set_variable('debug', false)}
if (get_variable('matchList')      == undefined) {set_variable('matchList', true)}
if (get_variable('break')          == undefined) {set_variable('break', true)}
if (get_variable('useHeal')        == undefined) {set_variable('useHeal', true)}
if (get_variable('useFreeze')      == undefined) {set_variable('useFreeze', false)}
if (get_variable('useMultistrike') == undefined) {set_variable('useMultistrike', false)}
if (get_variable('useFrenzy')      == undefined) {set_variable('useFrenzy', false)}
if (get_variable('useDelay')       == undefined) {set_variable('useDelay', false)}
if (get_variable('huntingAttack')  == undefined) {set_variable('huntingAttack', 'swarm')}"
                                }
                            ],
                            "text": "hsetup",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "System Reset",
                            "enabled": true,
                            "id": 126,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.log('-- Combat Implant has been reset to factory settings.', 'white', 'black')
SNCI.log('-- If you have previously backed up your kill list you may use \\'hload\\' to reload it', 'white', 'black')

set_variable('killList', ['rockhopper'])
set_variable('debug', false)
set_variable('useHeal', true)
set_variable('useFreeze', false)
set_variable('useMultistrike', false)
set_variable('useFrenzy', false)
set_variable('useDelay', false)
set_variable('matchList', true)
set_variable('break', true)
set_variable('huntingAttack', 'swarm')"
                                }
                            ],
                            "text": "^hreset$",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Change Auto Attack",
                            "enabled": true,
                            "id": 26,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.attack = args[1] + ' '
set_variable('huntingAttack', args[1] + ' ')
display_notice('Attack set to: ' + args[1], 'white', 'black')"
                                }
                            ],
                            "text": "hattack (.+)",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable List Mode - hlist",
                            "enabled": true,
                            "id": 56,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('matchList')) {
    SNCI.matchList = false
    set_variable('matchList', false)
    SNCI.log('Will match room listing', 'white')
} else {
    SNCI.matchList = true
    set_variable('matchList', true)
    SNCI.log('Will match priority listing', 'white')
}"
                                }
                            ],
                            "text": "hlist",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Break After Kill Mode - hbreak",
                            "enabled": true,
                            "id": 82,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('break')) {
    SNCI.break = false
    set_variable('break', false)
    SNCI.log('Will continue after kill.', 'white')
} else {
    SNCI.break = true
    set_variable('break', true)
    SNCI.log('Will break after kill.', 'white')
}"
                                }
                            ],
                            "text": "hbreak",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Break Threshold",
                            "enabled": true,
                            "id": 169,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "set_variable('breakThreshold', args[1])
SNCI.breakThreshold = args[1]"
                                }
                            ],
                            "text": "^hbreakthreshold ([0-9]*)$"
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Slain",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^(You) have slain a.*$|^.*has been slain by (.+)\\.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SNCI.freeze = false
SNCI.frenzy = false
SNCI.negation = false
SNCI.delaySwarm = false
SNCI.fever = false
SNCI.hypertension = false
SNCI.ambush = false
SNCI.backhand = false

//var a = new Audio('https://freesound.org/people/adcbicycle/sounds/13934/download/13934__adcbicycle__6.wav')
//a.play()

var autoList = ['You', 'Chronoxi Starwraith', 'Feraluna Starwraith', 'Mee', 'Casimar', 'Albion', 'Mykel']
var onList = ''

if (args[1]) {
    onList = autoList.includes(args[1])
} else {
    onList = autoList.includes(args[2])
}

if (SNCI.systemEnabled === true && onList) {
    SNCI.targetHealth = 0
    send_command('clearqueue')
    SNCI.findTarget()

    if (SNCI.class == 'Engineer' && get_variable('useQPCBoost')) {
        send_command('qpcboost')
    }

    if (SNCI.break) {
        SNCI.offenseEnabled = false
    }
    
    SNCI.huntingAttack()
}

var slainMessage = ''
var now = new Date()
if (SNCI.damageThisFight > 0 && SNCI.ttk > 0){
    slainMessage = SNCI.damageThisFight + ' damage done this fight. | TTK: ' + (now.getTime() - SNCI.ttk)/1000 + 's | DPS: ' + Math.round(SNCI.damageThisFight / ((now.getTime() - SNCI.ttk)/1000))
} else if (SNCI.damageThisFight > 0) {
    slainMessage = SNCI.damageThisFight + ' damage done this fight.'
} else if (SNCI.ttk > 0) {
    slainMessage = 'TTK: ' + (now.getTime() - SNCI.ttk)/1000 + 's'
}

if (SNCI.damageThisFight > 0 || SNCI.ttk > 0){
    SNCI.alert(slainMessage, 'lightgreen', 'darkblue')
}

SNCI.ttk = 0
SNCI.damageThisFight = 0
SNCI.interrupt = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Crash - AUTO OFF",
                    "enabled": true,
                    "id": 18,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^You prepare to crash out of the room.*$|^\\[Queue\\]: You will attempt to do CRASH .{1,4} when you recover balance.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SNCI.systemEnabled = false
display_notice('AUTO OFF', 'white', 'black')"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 10,
                    "key": 96,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('debug') == true) {SNCI.log('I am attacking ' + get_variable('tar'), 'white')}
SNCI.systemEnabled = true
SNCI.offenseEnabled = true
SNCI.huntingAttack()"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 32,
                    "key": 111,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SNCI.systemEnabled === true) {
  SNCI.systemEnabled = false
  display_notice(\"Combat implant disabled\", 'white', 'black')
} else {
  SNCI.systemEnabled = true
  display_notice(\"Combat implant enabled\", 'white', 'black')
}"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Heal",
                    "enabled": true,
                    "id": 115,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SNCI.class == 'Nanoseer') {
  send_command('NANO REPAIR')
} else if (SNCI.class == 'Fury') {
  send_command('KITH SUFFUSE')
} else if (SNCI.class == 'Scoundrel') {
  send_command('STIM')
} else if (SNCI.class == 'B.E.A.S.T.') {
  send_command('suit support')
} else if (SNCI.class == 'Engineer') {
  send_command('operate stimjector')
}"
                        }
                    ],
                    "text": "h",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Add to hunting list - hadd <mob>",
                    "enabled": true,
                    "id": 13,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "display_notice('Adding: ' + args[1] + ' to list', 'white', 'black')
let newList = get_variable('killList')
newList.push(args[1])
set_variable('killList', newList)"
                        }
                    ],
                    "text": "hadd (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Remove from hunting list - hremove <mob>",
                    "enabled": true,
                    "id": 14,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "display_notice('Removing: ' + args[1] + ' from list', 'white', 'black')

let newList = get_variable('killList')
newList = newList.filter(item => item !== args[1]);

set_variable('killList', newList)"
                        }
                    ],
                    "text": "hremove (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Save Hunting List To Backup - hsave",
                    "enabled": true,
                    "id": 15,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let newSave = get_variable('killList')
set_variable('killListBackup', newSave)
display_notice('Hunt List Saved', 'white', 'black')
"
                        }
                    ],
                    "text": "hsave",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Load Hunting List From Backup - hload",
                    "enabled": true,
                    "id": 16,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let backupList = get_variable('killListBackup')
set_variable('killList', backupList)
display_notice('Hunt List Loaded from Backup', 'white', 'black')"
                        }
                    ],
                    "text": "hload",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Show Hunting Targets - hshow",
                    "enabled": true,
                    "id": 17,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let killList = get_variable('killList')
for (i=0; i<killList.length; i++) {
    display_notice(killList[i], 'white', 'black')
}"
                        }
                    ],
                    "text": "hshow",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Item Priority - hup/hdown <mob>",
                    "enabled": true,
                    "id": 52,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var list = get_variable('killList')
var nameIndex = list.indexOf(args[2])
var name = list[nameIndex]

if (list[nameIndex-1] && nameIndex && args[1] === 'hup') {
    list[nameIndex] = list[nameIndex - 1]
    list[nameIndex-1] = name
} else if (list[nameIndex+1] && nameIndex && args[1] === 'hdown') {
    list[nameIndex] = list[nameIndex + 1]
    list[nameIndex+1] = name
}

set_variable('killList', list)

for (i=0; i<list.length; i++) {
    if(list[i] === name){
        display_notice(list[i], 'gold', 'black')
    } else {
        display_notice(list[i])
    }
}"
                        }
                    ],
                    "text": "^(hup|hdown) (.+)$",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Heal Toggle - hheal",
                    "enabled": true,
                    "id": 81,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useHeal')) {
    set_variable('useHeal', false)
    SNCI.useHeal = false
    SNCI.log('HEAL OFF', 'white')
} else {
    set_variable('useHeal', true)
    SNCI.useHeal = true
    SNCI.log('HEAL ON', 'white')
}"
                        }
                    ],
                    "text": "hheal",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Kill",
                    "enabled": true,
                    "id": 120,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('debug') == true) {SNCI.log('I am attacking ' + get_variable('tar'), 'white')}
SNCI.systemEnabled = true
SNCI.offenseEnabled = true
SNCI.huntingAttack()"
                        }
                    ],
                    "text": "k",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Generic",
            "enabled": true,
            "id": 4,
            "items": [
                {
                    "type": "group",
                    "name": "Interrupts",
                    "enabled": true,
                    "id": 147,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Super - Interrupt",
                            "enabled": true,
                            "id": 148,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^Throwing back its grizzled head, a sly cania lets out a high-pitched, wavering howl.$|^A sluggish atzaparaki shakes off some of its torpor and draws in a deep breath, its sides beginning to swell alarmingly.$|^Light begins to focus deep within the body of a salt-crusted quartz creeper, growing to an almost painful radiance.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.interrupt = true

SNCI.alert('interrupting super', 'white', 'blue')
SNCI.huntingAttack()
"
                                }
                            ],
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Left battle",
                    "enabled": true,
                    "id": 6,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You are no longer in the throes of battle.",
                    "actions": [
                        {
                            "action": "highlight",
                            "highlight": "match",
                            "highlight_backref": "1",
                            "highlight_fg": "#9488f6",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Hide Queue",
                    "enabled": false,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[Queue\\]: You will attempt to do.*$|^Your swarm is already focused upon a multistrike.*$",
                    "actions": [
                        {
                            "action": "gag"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Add Damage Per Kill",
                    "enabled": true,
                    "id": 57,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Damage Dealt: (.+) .+",
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SNCI.ttk == 0) {
    var now = new Date()
    SNCI.ttk = now.getTime()
}
SNCI.damageThisFight += parseInt(args[1])"
                        },
                        {
                            "action": "highlight",
                            "highlight": "match",
                            "highlight_backref": "1",
                            "highlight_fg": "#ff0000",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Not following",
                    "enabled": true,
                    "id": 87,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "(.+) is no longer following you.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SNCI.log(args[1] + ' Stopped Following!', 'darkred')"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Crash + Direction - c<dir>",
                    "enabled": true,
                    "id": 33,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "send_command('cq')
send_command('crash ' + args[1])"
                        }
                    ],
                    "text": "c(nw|ne|se|sw|n|s|e|w|u|d|in|out)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Javascript - js",
                    "enabled": true,
                    "id": 31,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "SNCI.log(eval(args[1]))"
                        }
                    ],
                    "text": "^js (.+)$",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Nanoseer",
            "enabled": true,
            "id": 21,
            "items": [
                {
                    "type": "group",
                    "name": "Configuration",
                    "enabled": true,
                    "id": 153,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Enable/Disable Freeze",
                            "enabled": true,
                            "id": 42,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useFreeze')) {
    set_variable('useFreeze', false)
    SNCI.useFreeze = false
    SNCI.log('FREEZE OFF', 'white')
} else {
    set_variable('useFreeze', true)
    SNCI.useFreeze = true
    SNCI.log('FREEZE ON', 'white')
}"
                                }
                            ],
                            "text": "hfreeze",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Multistrike",
                            "enabled": true,
                            "id": 43,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useMultistrike')) {
    set_variable('useMultistrike', false)
    SNCI.useMultistrike = false
    SNCI.log('MULTISTRIKE OFF', 'white')
} else {
    set_variable('useMultistrike', true)
    SNCI.useMultistrike = true
    SNCI.log('MULTISTRIKE ON', 'white')
}"
                                }
                            ],
                            "text": "^hmulti(strike)?$",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Frenzy",
                            "enabled": true,
                            "id": 45,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useFrenzy')) {
    set_variable('useFrenzy', false)
    SNCI.useFrenzy = false
    SNCI.log('FRENZY OFF', 'white')
} else {
    set_variable('useFrenzy', true)
    SNCI.useFrenzy = true
    SNCI.log('FRENZY ON', 'white')
}"
                                }
                            ],
                            "text": "hfrenzy",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Delay Swarm",
                            "enabled": true,
                            "id": 55,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useDelay')) {
    set_variable('useDelay', false)
    SNCI.useDelay = false
    SNCI.log('DELAY OFF', 'white')
} else if (args[1] == '' && get_variable('delayAttack') == '') {
    SNCI.alert('Delayed attack is not configured. Please provide a delayed attack to use\\nUsage: hdelay <attack>', 'red', 'black')
    return
} else {
    if (args[1] != '') {set_variable('delayAttack', args[1])}
    set_variable('useDelay', true)
    SNCI.useDelay = true
    SNCI.log('DELAY ON', 'white')
}"
                                }
                            ],
                            "text": "hdelay[ ]?(.*)",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Point Zero",
                            "enabled": true,
                            "id": 162,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('usePointZero')) {
    set_variable('usePointZero', false)
    SNCI.usePointZero = false
    SNCI.log('Point Zero Disabled', 'white')
} else {
    set_variable('usePointZero', true)
    SNCI.usePointZero = true
    SNCI.log('Point Zero Enabled', 'white')
}"
                                }
                            ],
                            "text": "hpointzero"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Speedup",
                            "enabled": true,
                            "id": 163,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useSpeedup')) {
    set_variable('useSpeedup', false)
    SNCI.useSpeedup = false
    SNCI.log('Speedup Disabled', 'white')
} else {
    set_variable('useSpeedup', true)
    SNCI.useSpeedup = true
    SNCI.log('Speedup Enabled', 'white')
}"
                                }
                            ],
                            "text": "hspeedup"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Negation",
                            "enabled": true,
                            "id": 164,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useNegation')) {
    set_variable('useNegation', false)
    SNCI.useNegation = false
    SNCI.log('Negation Disabled', 'white')
} else {
    set_variable('useNegation', true)
    SNCI.useNegation = true
    SNCI.log('Negation Enabled', 'white')
}"
                                }
                            ],
                            "text": "hnegation"
                        },
                        {
                            "type": "alias",
                            "name": "Nano Abilities - hnano",
                            "enabled": true,
                            "id": 90,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "var abilities = ''
abilities += 'Freeze: ' + get_variable('useFreeze') + '\\n'
abilities += 'Multistrike: ' + get_variable('useMultistrike') + '\\n'
abilities += 'DelaySwarm: ' + get_variable('useDelay') + '\\n'
abilities += 'UseFrenzy: ' + get_variable('useFrenzy') + '\\n'
abilities += 'Frenzy Status: ' + SNCI.frenzy + '\\n'
abilities += 'Use Point Zero: ' + get_variable('usePointZero') + '\\n'
abilities += 'Point Zero Status: ' + SNCI.pointZero + '\\n'
abilities += 'Use Speedup: ' + get_variable('useSpeedup') + '\\n'
abilities += 'Speedup Status: ' + SNCI.speedUp + '\\n'
abilities += 'Use Negation: ' + get_variable('useNegation') + '\\n'
abilities += 'Negation Status: ' + SNCI.negation + '\\n'

SNCI.log(abilities, 'white')"
                                }
                            ],
                            "text": "hnano",
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Shortcut",
                    "enabled": true,
                    "id": 154,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Void Soothe",
                            "enabled": true,
                            "id": 46,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "Void Soothe",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "vs",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Channel/Swap Empyreal",
                            "enabled": true,
                            "id": 22,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "var empyreal = {
    a: \"architect\",
    c: \"conqueror\",
    p: \"progenitor\",
    s: \"sunderer\",
    t: \"traveller\"
}

var command = {
    ch: \"oblivion channel \",
    sw: \"oblivion swap \"
}

send_command(command[args[1]] + empyreal[args[2]])"
                                }
                            ],
                            "text": "^(ch|sw)(a|c|p|s|t)$",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Limb drain",
                            "enabled": true,
                            "id": 53,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "limbs = {
    ll: 'left leg',
    rl: 'right leg',
    ra: 'right arm',
    la: 'left arm'
}

send_command('limbdrain ' + get_variable('tar') + ' ' + limbs[args[1]])"
                                }
                            ],
                            "text": "l(ll|rl|la|ra)",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Fly",
                            "enabled": true,
                            "id": 44,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "levitate",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "fly",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Heal",
                            "enabled": true,
                            "id": 152,
                            "matching": "exact",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "nano repair",
                                    "prefix_suffix": false
                                }
                            ],
                            "text": "heal"
                        },
                        {
                            "type": "alias",
                            "name": "Delay",
                            "enabled": true,
                            "id": 47,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "var command = {
    s: 'swarm'
}

send_command('delay ' + command[args[1]])"
                                }
                            ],
                            "text": "^d(s)$",
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Ability Activations",
                    "enabled": true,
                    "id": 161,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Leaving Room",
                            "enabled": true,
                            "id": 156,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You walk to the",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.speedup = false
SNCI.pointZero = false"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Delay Swarm On",
                            "enabled": true,
                            "id": 54,
                            "matching": "substring",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "Quickly, you program a delayed swarm attack",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.delaySwarm = true"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Freeze on",
                            "enabled": true,
                            "id": 29,
                            "matching": "substring",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "You brush your fingertips across",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.freeze = true"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Freeze off",
                            "enabled": false,
                            "id": 30,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^.+has cured the effects of Frozen.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.freeze = false
SNCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Frenzy Active",
                            "enabled": true,
                            "id": 39,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^A dark wave of madness rolls through your thoughts.*$|^You have already descended into a frenzy",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.frenzy = true
SNCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Rage off",
                            "enabled": false,
                            "id": 40,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "You break out of your frenzy.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.frenzy = false"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Frenzy Down",
                            "enabled": false,
                            "id": 38,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "You break out of your frenzy.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.alert('Frenzy Down', 'white', 'red')"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Negation Active",
                            "enabled": true,
                            "id": 166,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "aura descends over you like a giant, protective shadow.$|^You are already prepared to negate damage.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.negation = true
SNCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Negation Down",
                            "enabled": false,
                            "id": 36,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "The shadow of the Progenitor's protection springs to life around you, absorbing the damaging attack before lifting away from you, the air around you growing subtly lighter.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.alert('Negation Down', 'white', 'red')"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Multistrike Active",
                            "enabled": true,
                            "id": 20,
                            "matching": "substring",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "You focus intently to direct a portion of your swarm towards",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.multistrike = true
SNCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Multistrike Return",
                            "enabled": true,
                            "id": 19,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^The group of nanites returns back to you.$|^The nanites disperse. no longer striking",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.multistrike = false
SNCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Speedup Active",
                            "enabled": true,
                            "id": 157,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^You snap your fingers, and time starts flowing faster|^Time has already been distorted|^Time has been strangely distorted here.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.speedup = true
SNCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Speedup Inactive",
                            "enabled": true,
                            "id": 159,
                            "matching": "exact",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "The time distortion effect ends.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.speedUp = false
SNCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Point Zero Active",
                            "enabled": true,
                            "id": 158,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^The air crackles and contracts|^Lifting your hand, you call upon the void within|^Air swirls around a point of absolute coldness here.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.pointZero = true
SNCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Point Zero Inactive",
                            "enabled": true,
                            "id": 160,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^The swirling point zero suddenly collapses",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.pointZero = false"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Empyreal Channeling",
                            "enabled": true,
                            "id": 165,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You reach into your connection to the void",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('my_combat')) {
    SNCI.huntingAttack()
}"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Repair Used",
                            "enabled": true,
                            "id": 167,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^You inhale a cloud of your swarm",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.healReady = false
SNCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Repair Available",
                            "enabled": true,
                            "id": 168,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^Your nanites can again repair your body.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.healReady = true
SNCI.huntingAttack()"
                                },
                                {
                                    "action": "highlight",
                                    "highlight": "line",
                                    "highlight_backref": "1",
                                    "highlight_fg": "#82ea81",
                                    "highlight_bg": "#000000"
                                }
                            ]
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "alias",
                    "name": "Wakeup Nanoseer",
                    "enabled": true,
                    "id": 155,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "nano charge",
                            "prefix_suffix": true
                        },
                        {
                            "action": "waitfor",
                            "text": "^You start generating nanites.$|^You're already repairing your nanites.$",
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "expire": "6"
                        },
                        {
                            "action": "command",
                            "command": "nano rush on",
                            "prefix_suffix": true
                        },
                        {
                            "action": "waitfor",
                            "text": "^Inhaling a cloud of your swarm|^Your nanites are already boosting|haven.t learned",
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "expire": "6"
                        },
                        {
                            "action": "command",
                            "command": "nano protect on",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "wakeup"
                },
                {
                    "type": "trigger",
                    "name": "Queue Attack Nano",
                    "enabled": true,
                    "id": 9,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You brush your fingertips across|^Focusing on becoming more attuned",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SNCI.huntingAttack()"
                        }
                    ],
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Combat",
            "enabled": true,
            "id": 64,
            "items": [
                {
                    "type": "group",
                    "name": "Chat",
                    "enabled": true,
                    "id": 65,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Target call - tt <name>",
                            "enabled": false,
                            "id": 67,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SNCI.target = args[1]
set_variable('tar', args[1])
send_command('st ' + args[1])
send_command('crt Target: ' + args[1])"
                                }
                            ],
                            "text": "tt (.+)",
                            "items": []
                        }
                    ],
                    "actions": []
                }
            ],
            "actions": []
        }
    ],
    "description": "SNCI v1.2"
}