{
    "type": "group",
    "name": "starwraith scoundrel combat implant",
    "enabled": true,
    "id": 1,
    "items": [
        {
            "type": "function",
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "// Changelog
// 20190113T1503EST: Copied main system to separate class systems

// Place any code here you'd like to autorun when the system is loaded
send_command('wakeup')
SSCI = {
// Core Implant Code
    noticecolor: 'gold',
    packagename: 'starwraith scoundrel combat implant',
    shortname: 'SSCI',
    notice: function(text) {
        display_notice(\"[\" + this.shortname + \"] \" + text, this.noticecolor);
    },
    loaded: function() {
        //Send implant to browser log for debugging
        console.log(this)
        this.notice(\"Starwraith Scoundrel Combat Implant v1.0 Loaded. Good hunting, and good death.\\n\");
    },
    helpbox: function(title,text) {
        var helptext = \"<div class=\\\"mono\\\"><span style=\\\"color: #ffffff; \\\"><span style=\\\"background-color: #0000a0 \\\">\" + title + \"</span></span></div>\";
        helptext += \"<div class=\\\"mono\\\">\" + text.replace(\"\\n\",\"</div><div class=\\\"mono\\\">\") + \"</div>\";
        client.display_help_window(helptext);
    },
    disableGroup: function(name) {
        var group = reflex_find_by_name('group', name, false, false, this.packagename)
        reflex_disable(group)
    },
    enableGroup: function(name) {
        var group = reflex_find_by_name('group', name, false, false, this.packagename)
        reflex_enable(group)
    },
    log: function (x, fgcolor, bgcolor) {
        let type = typeof x
        switch(type) {
          case 'number':
          case 'string':
          case 'boolean':
            display_notice(x.toString(), fgcolor, bgcolor)
            break;
          case 'object':
            for (var prop in x) {
              display_notice(`${prop}: ${x[prop]}`, fgcolor, bgcolor)
            }
            break;
          case 'undefined':
            display_notice('undefined', fgcolor, bgcolor)
            break;
          default:
            display_notice('wtf is this')
        }
    },
    alert: function (text, fgcolor, bgcolor) {
        text = text.toUpperCase()
        let fullText = '-'.repeat(text.length+1) + '-------\\n--  '+ text + '  --\\n-------' + '-'.repeat(text.length+1)
        display_notice(fullText, fgcolor, bgcolor)
    },
    debugMessage: function (text) {
        if (get_variable('debug')) {
            this.log(text, 'white', 'black')
        }
    },
//System Variables
    goal: 'hunt2',
    matchList: get_variable('matchList'),
    systemEnabled: true,
    offenseEnabled: false,
    break: get_variable('break'),
    itemsInRoom: [],
    damageThisFight: 0,
    ttk: 0,
    targetHealth: 0,
    interrupt: false,
//Character    
    attack: get_variable('huntingAttack') + ' ',
    class: '',
    health: 0,
    maxHealth: 0,
    useHeal: get_variable('useHeal'),
    healReady: true,
//Nano
    multistrike: false,
    frenzy: false,
    freeze: false,
    delaySwarm: false,
    pointZero: false,
    speedup: false,
    negation: false,
    empyreal: '',
    useDelay: get_variable('useDelay'),
    useMultistrike: get_variable('useMultistrike'),
    useFrenzy: get_variable('useFrenzy'),
    usePointZero: get_variable('usePointZero'),
    useSpeedup: get_variable('useSpeedup'),
    useFreeze: get_variable('useFreeze'),
    useNegation: get_variable('useNegation'),
//Fury
    stance: '',
    bladeshape: false,
    rage: 0,
    maxRage: 0,
    unstoppable: false,
    berserk: false,
    useBerserk: get_variable('useBerserk'),
    fever: false,
    useFever: get_variable('useFever'),
    hypertension: false,
    infernoCharging: false,
//Scoundrel
    bullets: 0,
    ambush: false,
    useAmbush: get_variable('useAmbush'),
    rapidfire: false,
    useRapidfire: get_variable('useRapidfire'),
//B.E.A.S.T.
    backhand: false,
    plasma: 0,
    maxPlasma: 0,
    useResistance:   get_variable('useResistance'),
    useSerrate:      get_variable('useSerrate'),
    usePlasmaShield: get_variable('usePlasmaShield'),
    useRamset:       get_variable('useRamset'),
    useDampening:    get_variable('useDampening'),
    useJamming:      get_variable('useJamming'),
    resistance:   false,
    serrate:      false,
    plasmaShield: false,
    ramset:       false,
    dampening:    false,
    jamming:      false,
//Engineer
    parts: 0,
    repeat: true,
    wormDeployed: false,
//Combat functions 
    findTarget: function() {
        var itemList = this.itemsInRoom
        var killList = get_variable('killList')
        var targetFound = false
        
        //Match room order
        if (!this.matchList) {
            for (i=0; i<itemList.length; i++) {
                for (x=0; x<killList.length; x++) {
                    if (itemList[i].name.includes(killList[x]) && itemList[i].attrib === 'm' && targetFound === false) {
                        set_variable('tar', itemList[i].id)
                        send_command('settarget ' + itemList[i].id)
                        targetFound = true
                        display_notice('New target: '+itemList[i].name, 'red', 'black')
                    }
                }
            }
        } else { //Match priority/list order
            for (i=0; i<killList.length; i++) {
                for (x=0; x<itemList.length; x++) {
                    if (itemList[x].name.includes(killList[i]) && itemList[x].attrib === 'm' && targetFound === false) {
                        set_variable('tar', itemList[x].id)
                        send_command('settarget ' + itemList[x].id)
                        targetFound = true
                        display_notice('New target: '+itemList[x].name, 'red', 'black')
                    }
                }
            }
        }

        if (!targetFound) {
            //display_notice('No Target Found', 'red', 'black')
            set_variable('tar', '')
        }
    },
    huntingAttack: function() {
        
        if (!this.systemEnabled) {return}
        var command = ''
        
        //Nano
        if (this.class == 'Nanoseer') {
            
            //Self heal
            if (this.health / this.maxHealth < .8 && this.healReady && this.useHeal) {
                this.debugMessage('Nano repair')
                send_command('nano repair')
                return
                
            //Out of combat buffs
            //Casting and channeling are separated to enable the buff to be executed
            //immediately if already channeling one of the required empyreals
            //This prevents unnecessary swapping of empyreal channels after combat
            } else if (!this.negation && this.useNegation && this.empyreal == 'Progenitor') {
                this.debugMessage('Cast Negation')
                send_command('negation')
                return
                
            } else if (!this.frenzy && this.useFrenzy && this.empyreal == 'Conqueror') {
                this.debugMessage('Cast Frenzy')
                send_command('frenzy')
                return
                
            } else if (!this.frenzy && this.useFrenzy && this.empyreal != 'Conqueror') {
                this.debugMessage('Channel conqueror')
                send_command('oblivion channel conqueror')
                return
                
            } else if (!this.negation && this.useNegation && this.empyreal != 'Progenitor') {
                this.debugMessage('Channel Progenitor')
                send_command('oblivion channel progenitor')
                return
                
            //Abort execution of offensive actions if disabled
            } else if (!this.offenseEnabled || get_variable('tar') == '') {
                this.debugMessage('No target or offense disabled')
                return
                
            //Combat buffs
            } else if (!this.speedup && this.useSpeedup && this.empyreal != 'Traveller') {
                this.debugMessage('Channel Traveller')
                send_command('oblivion channel Traveller')
                return
                
            } else if (!this.speedup && this.useSpeedup && this.empyreal == 'Traveller') {
                this.debugMessage('Cast Speedup')
                send_command('speedup')
                return
                
            } else if (!this.pointZero && this.usePointZero) {
                this.debugMessage('Point Zero')
                send_command('void pointzero')
                return
                
            } else if (!this.delaySwarm && this.useDelay) {
                this.debugMessage('Delay Attack')
                command =  'delay '
                command += get_variable('delayAttack')
                command += ' '
                
            } else if (!this.multistrike && this.targetHealth > 40 && this.useMultistrike) {
                this.debugMessage('Multistrike')
                command = 'multistrike '
                
            } else if (!this.freeze && this.useFreeze && this.targetHealth > 20 ) {
                this.debugMessage('Freeze')
                command = 'freeze '
                
            } else {
                this.debugMessage('Default Attack')
                command = this.attack + ' '
                
            }
            
            command += get_variable('tar')
            send_command(command)          
            
        //Fury
        } else if (this.class == 'Fury') {
            command += 'combo '
            
            if (this.interrupt && this.offenseEnabled) {
                send_command('kith fever ' + get_variable('tar'))
                return;
            }
            
            if (this.health / this.maxHealth < .8 && this.healReady  && this.useHeal) {
                send_command('kith suffuse')
                return;
            }else if (!this.bladeshape && get_variable('kithbladeshape') !== undefined && get_variable('kithbladeshape') !== '') {
                send_command(get_variable('kithbladeshape'))
                return;
            }else if (get_variable('tar') == '' || this.offenseEnabled == false) {
                return;
            }else if (!this.fever && this.useFever) {
                command = 'kith fever ';
            }else if (this.goal == 'hunt1') {
                //Battleflow attack
                if (this.stance == 'Symmetry') {
                    command += 'swiftcut '
                } else if (this.stance == 'Flare') {
                    command += 'wound '
                } else if (this.stance == 'Eruption') {
                    if (this.hypertension) {
                        command += 'bloodburn '
                    } else {
                        command += 'hypertension '
                    }
                } else if (this.stance == 'Ember') {
                    command += 'legspike '
                }

                //Rage Attack
                if (this.unstoppable) {
                    command += 'slice '
                } else if (this.stance == 'Symmetry') {
                    if (this.rage / this.maxRage > .13 && !this.berserk && this.useBerserk) {
                        command += 'berserk '
                    } else {
                        command += 'flyinglash '
                    }
                } else if (this.stance == 'Flare') {
                    command += 'rend '
                } else if (this.stance == 'Eruption') {
                    if (this.health / this.maxHealth < .7) {
                        command += 'resistant '
                    } else {
                        command += 'upperlash '
                    }
                } else if (this.stance == 'Ember') {
                    if (this.rage / this.maxRage > .73  && this.unstoppable == false) {
                        command += 'unstoppable '
                    } else {
                        command += 'strike '
                    }
                }
            }else if (this.goal == 'hunt2') {
                //Battleflow attack
                if (this.stance == 'Symmetry') {
                    command += 'swiftcut '
                } else if (this.stance == 'Flare') {
                    command += 'wound '
                } else if (this.stance == 'Eruption') {
                    command += 'rupture '
                }

                //Rage Attack
                if (this.unstoppable) {
                    command += 'slice '
                } else if (this.stance == 'Symmetry') {
                    if (this.rage / this.maxRage > .13 && !this.berserk && this.useBerserk) {
                        command += 'berserk '
                    } else {
                        command += 'flyinglash '
                    }
                } else if (this.stance == 'Flare') {
                    command += 'rend '
                } else if (this.stance == 'Eruption') {
                    if (this.rage / this.maxRage > .73  && this.unstoppable == false) {
                        command += 'unstoppable '
                    } else {
                        command += 'strike '
                    }
                }
            }else if (this.goal == 'hunt2') {
                var next = ''
                command = 'combo '
                
                //Battleflow attack
                if (this.stance == 'Symmetry') {
                    command += 'gutrend '
                    next = 'Ember'
                } else if (this.stance == 'Ember') {
                    command += 'legspike '
                    next = 'Symmetry'
                } else if (this.stance == 'Flare') {
                    command += 'sear '
                    next = 'Symmetry'
                }

                //Rage Attack
                if (this.unstoppable) {
                    command += 'slice '
                } else if (next == 'Symmetry') {
                    if (this.rage / this.maxRage > .8  && this.unstoppable == false) {
                        command += 'unstoppable '
                    } else {
                        command += 'deflect '
                    }
                } else if (next == 'Ember') {
                    command += 'resistant '
                } else if (next == 'Flare') {
                    command += 'reel '
                }
            }
            
            command += get_variable('tar')
            send_command(command)
            
        //Scoundrel    
        }else if (this.class == 'Scoundrel') {
            
            if (this.health / this.maxHealth < .8 && this.healReady && this.useHeal) {
                send_command('stim')
                return
            } else if (this.offenseEnabled == false || get_variable('tar') == '') {
                return
            } else if (this.bullets == 0) {
                command += 'ied fling ripper at '
            } else if (this.bullets == 1) {
                command += 'gun crackshot '
            } else if (!this.ambush && this.useAmbush && this.bullets) {
                command += 'gun ambush '
            } else if (!this.rapidfire && this.useRapidfire) {
                command += 'gun rapidfire '
            } else {
                command += 'gun crackshot '
            }
            
            command += get_variable('tar')
            send_command(command)
        
        }else if (this.class == 'B.E.A.S.T.'){
            command = ''
            
            if (this.health / this.maxHealth < .8 && this.healReady && this.useHeal) {
                command += 'suit support'
                
            } else if (!this.resistance   && this.useResistance)    { command += 'plasma resistance'
            } else if (!this.serrate      && this.useSerrate)       { command += 'mwp serrate'
            } else if (!this.plasmaShield && this.usePlasmaShield)  { command += 'plasma shield'
            } else if (!this.ramset       && this.useRamset)        { command += 'suit ramset'
            } else if (!this.dampening    && this.useDampening)     { command += 'suit dampening'
            } else if (!this.jamming      && this.useJamming)       { command += 'suit jamming'
            } else if (!this.offenseEnabled || get_variable('tar') == '') {
                message  = 'Aggressive actions are disabled\\n'
                message += 'Offense Enabled: ' + this.offenseEnabled + '\\n'
                message += 'Target Variable: ' + get_variable('tar') + '\\n'
                this.debugMessage(message)
                return
                
            } else if (!this.backhand) { command += 'suit backhand '
            } else { command += 'mwp wristblade '
            }
            
            if (command[command.length - 1] == ' ') {command += get_variable('tar')}
            
            this.debugMessage('Executing command: \"' + command + '\"')
            send_command(command)
            return
            
        //Engineer
        }else if (this.class == 'Engineer'){
            if (this.health / this.maxHealth < .8 && this.healReady && this.useHeal) {
                this.debugMessage('Activating stimjector')
                send_command('operate stimjector')
                
            }else if (get_variable('tar') == '' || this.offenseEnabled == false) {
                return;
                
            }else if (!this.repeat && get_variable('useRepeat') && get_variable('repeatAttack') != '') {
                this.debugMessage('Initiating repeat')
                command =  'bot repeat '
                command += get_variable('engineerRepeatAttack')
                command += ' '

            } else if (get_variable('useWorm') && this.targetHealth > 0.7 && !this.wormDeployed) {
                this.debugMessage('Executing burrowbot worm attack')
                command = 'bot worm '

            } else if (get_variable('useRelease') && this.wormDeployed && this.targetHealth < 0.3) {
                this.debugMessage('Releasing burrowbot')
                command = 'bot release '
            }
            else {
                this.debugMessage('Executing default engineer attack')
                command = 'bot claw '
            }
            
            this.debugMessage('Attempting command: ' + command) 
            command += get_variable('tar')
            send_command(command)
        }
    }
}

SSCI.loaded();",
            "items": []
        },
        {
            "type": "function",
            "name": "onGMCP",
            "enabled": true,
            "id": 3,
            "code": "// Place any code here you'd like to run when a GMCP message is received
// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"

GMCP[args.gmcp_method] = args.gmcp_args

/* ------------------------------------------ CHARACTER STUFF ----------------------------------- */

// Seen when doing score
if (args.gmcp_method == \"Char.Status\" && args.gmcp_args.first_name) {
    SSCI.first_name = args.gmcp_args.first_name;
}

if (args.gmcp_method == \"Char.Vitals\") {

    // Track health changes
    var change = SSCI.health - args.gmcp_args.hp;
   
    if (change > 0) {
        SSCI.log('Damage taken: ' + change, 'yellow')
    } else if (change < 0) {
        SSCI.log('Damage healed: ' + Math.abs(change), '#6bdaee')
    }
    
    SSCI.health = args.gmcp_args.hp
    SSCI.maxHealth = args.gmcp_args.maxhp

    // Check class
    if (!SSCI.class || SSCI.class != args.gmcp_args.class) {
        SSCI.class = args.gmcp_args.class
        
        SSCI.disableGroup('Fury')
        SSCI.disableGroup('Nanoseer')
        SSCI.disableGroup('Scoundrel')
        SSCI.disableGroup('B.E.A.S.T.')
        SSCI.disableGroup('Engineer')
        
        SSCI.enableGroup(SSCI.class)
    }
 
    if (SSCI.class === 'Fury') {
        SSCI.stance = args.gmcp_args.st
        SSCI.rage = args.gmcp_args.rg
        SSCI.maxRage = args.gmcp_args.maxrg
    } else if (SSCI.class === 'Scoundrel') {
        SSCI.bullets = args.gmcp_args.bl
    } else if (SSCI.class == 'Engineer') {
        SSCI.parts = args.gmcp_args.pt
    }
}

/* ----------------------------------- DEFENCES AND BUFFS --------------------------------------- */

if (args.gmcp_method == 'Char.Defences.Add') {
    
    //Fury
    if (args.gmcp_args.name == 'Oblivion: Conqueror')  {
        SSCI.empyreal = 'Conqueror'
    } else if (args.gmcp_args.name == 'Oblivion: Traveller')  {
        SSCI.empyreal = 'Traveller'
    } else if (args.gmcp_args.name == 'Oblivion: Architect')  {
        SSCI.empyreal = 'Architect'
    } else if (args.gmcp_args.name == 'Oblivion: Progenitor') {
        SSCI.empyreal = 'Progenitor'
    } else if (args.gmcp_args.name == 'Oblivion: Sunderer')   {
        SSCI.empyreal = 'Sunderer'
    }
}

/* -------------------------------------------- ITEMS IN ROOM ----------------------------------- */

//Get Items In Room
if (args.gmcp_method == \"Char.Items.List\") {
    SSCI.itemsInRoom = args.gmcp_args['items']
}

//Remove items when items leave
if (args.gmcp_method == \"Char.Items.Remove\") {
    let itemLeaving = args.gmcp_args['item']
    
    //Find index of item
    SSCI.itemsInRoom = SSCI.itemsInRoom.filter(item => item.id !== itemLeaving.id);
    
}

//Add items when items enter
if (args.gmcp_method == \"Char.Items.Add\") {
    let itemJoining = args.gmcp_args['item']
    
    //Find index of item
    SSCI.itemsInRoom.push(itemJoining);
    
    if (SSCI.systemEnabled === true) {
        if (!get_variable('tar')) {
            SSCI.findTarget()
        }
    }
    
    if (SSCI.infernoCharging && itemJoining.attrib === 'm') {
        send_command('asdf')
        SSCI.infernoCharging = false
        SSCI.alert('mob entered - inferno cancelled', 'white', 'red')
    }
}

/* -------------------------------------------- PLAYERS IN ROOM ----------------------------------- */
if (args.gmcp_method == \"Room.Players\") {
    SSCI.playersInRoom = args.gmcp_args
}

/* --------------------------------------------- HELPERS --------------------------------- */
if (args.gmcp_method == \"Room.Info\") {
    if (SSCI.systemEnabled === true) {
        SSCI.findTarget()
    }
}

if (args.gmcp_method == \"IRE.Target.Info\") {
    SSCI.targetHealth = args.gmcp_args['hpperc'].slice(0, -1)
}

/* --------------------------------------------- CLASS HELPERS --------------------------------- */

//B.E.A.S.T. Plasma Management
if (args.gmcp_method == \"Char.Vitals\" && SSCI.class == 'B.E.A.S.T.') {
    SSCI.plasma = args.gmcp_args.pl
    SSCI.maxPlasma = args.gmcp_args.maxpl
}",
            "items": []
        },
        {
            "type": "group",
            "name": "Auto Hunt",
            "enabled": true,
            "id": 8,
            "items": [
                {
                    "type": "group",
                    "name": "Setup",
                    "enabled": true,
                    "id": 41,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Combat Implant Setup - hsetup",
                            "enabled": true,
                            "id": 25,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.log('-- Hunting List Setup.  Use \\'hsave\\' to keep a backup.  \\'hload\\' will load your backup.', 'white', 'black')
SSCI.log('-- Use \\'hadd\\' <name> to add to the list and \\'hremove\\' <name> to remove items from this list. \\'hshow\\' will show the items on your list.', 'white', 'black')
SSCI.log('-- Use \\'hattack\\' <attackName> to make it your primary attack that will be auto used.', 'white')
SSCI.log('-- Use \\'hlist\\' to switch between room and priority list. Use \\'hup\\' or \\'hdown\\' <name> to increase or decrease an item on the priority list.', 'white')
SSCI.log('-- Make sure you use \\'config usequeueing on\\'.  Then you can use other attacks to overwrite auto attacks.', 'white')

if (get_variable('killList')       == undefined) {set_variable('killList', ['rockhopper'])}
if (get_variable('debug')          == undefined) {set_variable('debug', false)}
if (get_variable('matchList')      == undefined) {set_variable('matchList', true)}
if (get_variable('break')          == undefined) {set_variable('break', true)}
if (get_variable('useHeal')        == undefined) {set_variable('useHeal', true)}
if (get_variable('useFreeze')      == undefined) {set_variable('useFreeze', false)}
if (get_variable('useMultistrike') == undefined) {set_variable('useMultistrike', false)}
if (get_variable('useFrenzy')      == undefined) {set_variable('useFrenzy', false)}
if (get_variable('useDelay')       == undefined) {set_variable('useDelay', false)}
if (get_variable('useBerserk')     == undefined) {set_variable('useBerserk', false)}
if (get_variable('useFever')       == undefined) {set_variable('useFever', false)}
if (get_variable('useAmbush')      == undefined) {set_variable('useAmbush', false)}
if (get_variable('useRapidfire')   == undefined) {set_variable('useRapidfire', false)}"
                                }
                            ],
                            "text": "hsetup",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "System Reset",
                            "enabled": true,
                            "id": 126,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.log('-- Combat Implant has been reset to factory settings.', 'white', 'black')
SSCI.log('-- If you have previously backed up your kill list you may use \\'hload\\' to reload it', 'white', 'black')

set_variable('killList', ['rockhopper'])
set_variable('debug', false)
set_variable('useFreeze', false)
set_variable('useMultistrike', false)
set_variable('useFrenzy', false)
set_variable('useDelay', false)
set_variable('useBerserk', false)
set_variable('useFever', false)
set_variable('useAmbush', false)
set_variable('useRapidfire', false)
set_variable('useHeal', true)
set_variable('matchList', true)
set_variable('break', true)"
                                }
                            ],
                            "text": "^hreset$",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Change Auto Attack",
                            "enabled": true,
                            "id": 26,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.attack = args[1] + ' '
set_variable('huntingAttack', args[1] + ' ')
display_notice('Attack set to: ' + args[1], 'white', 'black')"
                                }
                            ],
                            "text": "hattack (.+)",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable List Mode - hlist",
                            "enabled": true,
                            "id": 56,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('matchList')) {
    SSCI.matchList = false
    set_variable('matchList', false)
    SSCI.log('Will match room listing', 'white')
} else {
    SSCI.matchList = true
    set_variable('matchList', true)
    SSCI.log('Will match priority listing', 'white')
}"
                                }
                            ],
                            "text": "hlist",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Break After Kill Mode - hbreak",
                            "enabled": true,
                            "id": 82,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('break')) {
    SSCI.break = false
    set_variable('break', false)
    SSCI.log('Will continue after kill.', 'white')
} else {
    SSCI.break = true
    set_variable('break', true)
    SSCI.log('Will break after kill.', 'white')
}"
                                }
                            ],
                            "text": "hbreak",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Break Threshold",
                            "enabled": true,
                            "id": 169,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "set_variable('breakThreshold', args[1])
SSCI.breakThreshold = args[1]"
                                }
                            ],
                            "text": "^hbreakthreshold ([0-9]*)$"
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Slain",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^(You) have slain a.*$|^.*has been slain by (.+)\\.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.freeze = false
SSCI.frenzy = false
SSCI.negation = false
SSCI.delaySwarm = false
SSCI.fever = false
SSCI.hypertension = false
SSCI.ambush = false
SSCI.backhand = false

var a = new Audio('https://freesound.org/people/adcbicycle/sounds/13934/download/13934__adcbicycle__6.wav')
//a.play()

var autoList = ['You', 'Chronoxi Starwraith', 'Feraluna Starwraith', 'Mee', 'Casimar', 'Albion', 'Mykel']
var onList = ''

if (args[1]) {
    onList = autoList.includes(args[1])
} else {
    onList = autoList.includes(args[2])
}

if (SSCI.systemEnabled === true && onList) {
    SSCI.targetHealth = 0
    send_command('clearqueue')
    SSCI.findTarget()

    if (SSCI.class == 'Engineer' && get_variable('useQPCBoost')) {
        send_command('qpcboost')
    }

    if (SSCI.break) {
        SSCI.offenseEnabled = false
    }
    
    SSCI.huntingAttack()
}

var slainMessage = ''
var now = new Date()
if (SSCI.damageThisFight > 0 && SSCI.ttk > 0){
    slainMessage = SSCI.damageThisFight + ' damage done this fight. | TTK: ' + (now.getTime() - SSCI.ttk)/1000 + 's | DPS: ' + Math.round(SSCI.damageThisFight / ((now.getTime() - SSCI.ttk)/1000))
} else if (SSCI.damageThisFight > 0) {
    slainMessage = SSCI.damageThisFight + ' damage done this fight.'
} else if (SSCI.ttk > 0) {
    slainMessage = 'TTK: ' + (now.getTime() - SSCI.ttk)/1000 + 's'
}

if (SSCI.damageThisFight > 0 || SSCI.ttk > 0){
    SSCI.alert(slainMessage, 'lightgreen', 'darkblue')
}

SSCI.ttk = 0
SSCI.damageThisFight = 0
SSCI.interrupt = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Crash - AUTO OFF",
                    "enabled": true,
                    "id": 18,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^You prepare to crash out of the room.*$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.systemEnabled = false
display_notice('AUTO OFF', 'white', 'black')"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 10,
                    "key": 96,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('debug') == true) {SSCI.log('I am attacking ' + get_variable('tar'), 'white')}
SSCI.systemEnabled = true
SSCI.offenseEnabled = true
SSCI.huntingAttack()"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 32,
                    "key": 111,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SSCI.systemEnabled === true) {
  SSCI.systemEnabled = false
  display_notice(\"Combat implant disabled\", 'white', 'black')
} else {
  SSCI.systemEnabled = true
  display_notice(\"Combat implant enabled\", 'white', 'black')
}"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Heal",
                    "enabled": true,
                    "id": 115,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SSCI.class == 'Nanoseer') {
  send_command('NANO REPAIR')
} else if (SSCI.class == 'Fury') {
  send_command('KITH SUFFUSE')
} else if (SSCI.class == 'Scoundrel') {
  send_command('STIM')
} else if (SSCI.class == 'B.E.A.S.T.') {
  send_command('suit support')
} else if (SSCI.class == 'Engineer') {
  send_command('operate stimjector')
}"
                        }
                    ],
                    "text": "h",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Add to hunting list - hadd <mob>",
                    "enabled": true,
                    "id": 13,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "display_notice('Adding: ' + args[1] + ' to list', 'white', 'black')
let newList = get_variable('killList')
newList.push(args[1])
set_variable('killList', newList)"
                        }
                    ],
                    "text": "hadd (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Remove from hunting list - hremove <mob>",
                    "enabled": true,
                    "id": 14,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "display_notice('Removing: ' + args[1] + ' from list', 'white', 'black')

let newList = get_variable('killList')
newList = newList.filter(item => item !== args[1]);

set_variable('killList', newList)"
                        }
                    ],
                    "text": "hremove (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Save Hunting List To Backup - hsave",
                    "enabled": true,
                    "id": 15,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let newSave = get_variable('killList')
set_variable('killListBackup', newSave)
display_notice('Hunt List Saved', 'white', 'black')
"
                        }
                    ],
                    "text": "hsave",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Load Hunting List From Backup - hload",
                    "enabled": true,
                    "id": 16,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let backupList = get_variable('killListBackup')
set_variable('killList', backupList)
display_notice('Hunt List Loaded from Backup', 'white', 'black')"
                        }
                    ],
                    "text": "hload",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Show Hunting Targets - hshow",
                    "enabled": true,
                    "id": 17,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let killList = get_variable('killList')
for (i=0; i<killList.length; i++) {
    display_notice(killList[i], 'white', 'black')
}"
                        }
                    ],
                    "text": "hshow",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Item Priority - hup/hdown <mob>",
                    "enabled": true,
                    "id": 52,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var list = get_variable('killList')
var nameIndex = list.indexOf(args[2])
var name = list[nameIndex]

if (list[nameIndex-1] && nameIndex && args[1] === 'hup') {
    list[nameIndex] = list[nameIndex - 1]
    list[nameIndex-1] = name
} else if (list[nameIndex+1] && nameIndex && args[1] === 'hdown') {
    list[nameIndex] = list[nameIndex + 1]
    list[nameIndex+1] = name
}

set_variable('killList', list)

for (i=0; i<list.length; i++) {
    if(list[i] === name){
        display_notice(list[i], 'gold', 'black')
    } else {
        display_notice(list[i])
    }
}"
                        }
                    ],
                    "text": "^(hup|hdown) (.+)$",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Heal Toggle - hheal",
                    "enabled": true,
                    "id": 81,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useHeal')) {
    set_variable('useHeal', false)
    SSCI.useHeal = false
    SSCI.log('HEAL OFF', 'white')
} else {
    set_variable('useHeal', true)
    SSCI.useHeal = true
    SSCI.log('HEAL ON', 'white')
}"
                        }
                    ],
                    "text": "hheal",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Kill",
                    "enabled": true,
                    "id": 120,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('debug') == true) {SSCI.log('I am attacking ' + get_variable('tar'), 'white')}
SSCI.systemEnabled = true
SSCI.offenseEnabled = true
SSCI.huntingAttack()"
                        }
                    ],
                    "text": "k",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Generic",
            "enabled": true,
            "id": 4,
            "items": [
                {
                    "type": "group",
                    "name": "Interrupts",
                    "enabled": true,
                    "id": 147,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Super - Interrupt",
                            "enabled": true,
                            "id": 148,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^Throwing back its grizzled head, a sly cania lets out a high-pitched, wavering howl.$|^A sluggish atzaparaki shakes off some of its torpor and draws in a deep breath, its sides beginning to swell alarmingly.$|^Light begins to focus deep within the body of a salt-crusted quartz creeper, growing to an almost painful radiance.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.interrupt = true

SSCI.alert('interrupting super', 'white', 'blue')
SSCI.huntingAttack()
"
                                }
                            ],
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Travel",
                    "enabled": true,
                    "id": 149,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Battlemaster Engineer Return",
                            "enabled": true,
                            "id": 125,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "A tripod-mounted wormhole generator has been set up in the center of the cracked landing pad.",
                            "actions": [
                                {
                                    "action": "linkify",
                                    "linkify": "match",
                                    "linkify_backref": "1",
                                    "linkify_text_type": "capture",
                                    "linkify_text": "",
                                    "linkify_command_type": "value",
                                    "linkify_command": "turn tripod&push tripod",
                                    "linkify_color": "#26aa95"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Battlemaster Engineer Omni",
                            "enabled": true,
                            "id": 124,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "A tripod-mounted wormhole generator has been set up in the center of the repair bay.",
                            "actions": [
                                {
                                    "action": "linkify",
                                    "linkify": "match",
                                    "linkify_backref": "1",
                                    "linkify_text_type": "capture",
                                    "linkify_text": "",
                                    "linkify_command_type": "value",
                                    "linkify_command": "turn tripod&push tripod",
                                    "linkify_color": "#26aa95"
                                }
                            ],
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Left battle",
                    "enabled": true,
                    "id": 6,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You are no longer in the throes of battle.",
                    "actions": [
                        {
                            "action": "highlight",
                            "highlight": "match",
                            "highlight_backref": "1",
                            "highlight_fg": "#9488f6",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Hide Queue",
                    "enabled": false,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[Queue\\]: You will attempt to do.*$|^Your swarm is already focused upon a multistrike.*$",
                    "actions": [
                        {
                            "action": "gag"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Add Damage Per Kill",
                    "enabled": true,
                    "id": 57,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Damage Dealt: (.+) .+",
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SSCI.ttk == 0) {
    var now = new Date()
    SSCI.ttk = now.getTime()
}
SSCI.damageThisFight += parseInt(args[1])"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Not following",
                    "enabled": true,
                    "id": 87,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "(.+) is no longer following you.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.log(args[1] + ' Stopped Following!', 'darkred')"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Crash + Direction - c<dir>",
                    "enabled": true,
                    "id": 33,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "send_command('cq')
send_command('crash ' + args[1])"
                        }
                    ],
                    "text": "c(nw|ne|se|sw|n|s|e|w|u|d|in|out)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Javascript - js",
                    "enabled": true,
                    "id": 31,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.log(eval(args[1]))"
                        }
                    ],
                    "text": "^js (.+)$",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Spaceship",
            "enabled": true,
            "id": 11,
            "items": [
                {
                    "type": "alias",
                    "name": "Ship Beacon - sb",
                    "enabled": true,
                    "id": 12,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "SHIP BEACON",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "sb",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Incursion List - il",
                    "enabled": true,
                    "id": 60,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "Incursion List",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "il",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Incursion Map - im",
                    "enabled": true,
                    "id": 62,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "Incursion Map",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "im",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Starchart - sc <place>",
                    "enabled": true,
                    "id": 61,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "send_command('starchart ' + args[1])"
                        }
                    ],
                    "text": "^sc (.*)$",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Cargo Recover - cr <dir>",
                    "enabled": true,
                    "id": 63,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "cargo recover @1",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "^cr (.+)$",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Cosmpiercer map - cpm",
                    "enabled": true,
                    "id": 51,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "Cosmpiercer map",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "cpm",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Cosmpiecer Liberate - cpl",
                    "enabled": true,
                    "id": 68,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "cosmpiercer liberate",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "cpl",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Cosmpiercer list - cp",
                    "enabled": true,
                    "id": 50,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "Cosmpiercer list",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "cp",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Nanoseer",
            "enabled": false,
            "id": 21,
            "items": [
                {
                    "type": "group",
                    "name": "Configuration",
                    "enabled": true,
                    "id": 153,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Enable/Disable Freeze",
                            "enabled": true,
                            "id": 42,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useFreeze')) {
    set_variable('useFreeze', false)
    SSCI.useFreeze = false
    SSCI.log('FREEZE OFF', 'white')
} else {
    set_variable('useFreeze', true)
    SSCI.useFreeze = true
    SSCI.log('FREEZE ON', 'white')
}"
                                }
                            ],
                            "text": "hfreeze",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Multistrike",
                            "enabled": true,
                            "id": 43,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useMultistrike')) {
    set_variable('useMultistrike', false)
    SSCI.useMultistrike = false
    SSCI.log('MULTISTRIKE OFF', 'white')
} else {
    set_variable('useMultistrike', true)
    SSCI.useMultistrike = true
    SSCI.log('MULTISTRIKE ON', 'white')
}"
                                }
                            ],
                            "text": "^hmulti(strike)?$",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Frenzy",
                            "enabled": true,
                            "id": 45,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useFrenzy')) {
    set_variable('useFrenzy', false)
    SSCI.useFrenzy = false
    SSCI.log('FRENZY OFF', 'white')
} else {
    set_variable('useFrenzy', true)
    SSCI.useFrenzy = true
    SSCI.log('FRENZY ON', 'white')
}"
                                }
                            ],
                            "text": "hfrenzy",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Delay Swarm",
                            "enabled": true,
                            "id": 55,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useDelay')) {
    set_variable('useDelay', false)
    SSCI.useDelay = false
    SSCI.log('DELAY OFF', 'white')
} else if (args[1] == '' && get_variable('delayAttack') == '') {
    SSCI.alert('Delayed attack is not configured. Please provide a delayed attack to use\\nUsage: hdelay <attack>', 'red', 'black')
    return
} else {
    if (args[1] != '') {set_variable('delayAttack', args[1])}
    set_variable('useDelay', true)
    SSCI.useDelay = true
    SSCI.log('DELAY ON', 'white')
}"
                                }
                            ],
                            "text": "hdelay[ ]?(.*)",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Point Zero",
                            "enabled": true,
                            "id": 162,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('usePointZero')) {
    set_variable('usePointZero', false)
    SSCI.usePointZero = false
    SSCI.log('Point Zero Disabled', 'white')
} else {
    set_variable('usePointZero', true)
    SSCI.usePointZero = true
    SSCI.log('Point Zero Enabled', 'white')
}"
                                }
                            ],
                            "text": "hpointzero"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Speedup",
                            "enabled": true,
                            "id": 163,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useSpeedup')) {
    set_variable('useSpeedup', false)
    SSCI.useSpeedup = false
    SSCI.log('Speedup Disabled', 'white')
} else {
    set_variable('useSpeedup', true)
    SSCI.useSpeedup = true
    SSCI.log('Speedup Enabled', 'white')
}"
                                }
                            ],
                            "text": "hspeedup"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Negation",
                            "enabled": true,
                            "id": 164,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useNegation')) {
    set_variable('useNegation', false)
    SSCI.useNegation = false
    SSCI.log('Negation Disabled', 'white')
} else {
    set_variable('useNegation', true)
    SSCI.useNegation = true
    SSCI.log('Negation Enabled', 'white')
}"
                                }
                            ],
                            "text": "hnegation"
                        },
                        {
                            "type": "alias",
                            "name": "Nano Abilities - hnano",
                            "enabled": true,
                            "id": 90,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "var abilities = ''
abilities += 'Freeze: ' + get_variable('useFreeze') + '\\n'
abilities += 'Multistrike: ' + get_variable('useMultistrike') + '\\n'
abilities += 'DelaySwarm: ' + get_variable('useDelay') + '\\n'
abilities += 'UseFrenzy: ' + get_variable('useFrenzy') + '\\n'
abilities += 'Frenzy Status: ' + SSCI.frenzy + '\\n'
abilities += 'Use Point Zero: ' + get_variable('usePointZero') + '\\n'
abilities += 'Point Zero Status: ' + SSCI.pointZero + '\\n'
abilities += 'Use Speedup: ' + get_variable('useSpeedup') + '\\n'
abilities += 'Speedup Status: ' + SSCI.speedUp + '\\n'
abilities += 'Use Negation: ' + get_variable('useNegation') + '\\n'
abilities += 'Negation Status: ' + SSCI.negation + '\\n'

SSCI.log(abilities, 'white')"
                                }
                            ],
                            "text": "hnano",
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Shortcut",
                    "enabled": true,
                    "id": 154,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Void Soothe",
                            "enabled": true,
                            "id": 46,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "Void Soothe",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "vs",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Channel/Swap Empyreal",
                            "enabled": true,
                            "id": 22,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "var empyreal = {
    a: \"architect\",
    c: \"conqueror\",
    p: \"progenitor\",
    s: \"sunderer\",
    t: \"traveller\"
}

var command = {
    ch: \"oblivion channel \",
    sw: \"oblivion swap \"
}

send_command(command[args[1]] + empyreal[args[2]])"
                                }
                            ],
                            "text": "^(ch|sw)(a|c|p|s|t)$",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Limb drain",
                            "enabled": true,
                            "id": 53,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "limbs = {
    ll: 'left leg',
    rl: 'right leg',
    ra: 'right arm',
    la: 'left arm'
}

send_command('limbdrain ' + get_variable('tar') + ' ' + limbs[args[1]])"
                                }
                            ],
                            "text": "l(ll|rl|la|ra)",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Fly",
                            "enabled": true,
                            "id": 44,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "levitate",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "fly",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Heal",
                            "enabled": true,
                            "id": 152,
                            "matching": "exact",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "nano repair",
                                    "prefix_suffix": false
                                }
                            ],
                            "text": "heal"
                        },
                        {
                            "type": "alias",
                            "name": "Delay",
                            "enabled": true,
                            "id": 47,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "var command = {
    s: 'swarm'
}

send_command('delay ' + command[args[1]])"
                                }
                            ],
                            "text": "^d(s)$",
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Ability Activations",
                    "enabled": true,
                    "id": 161,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Leaving Room",
                            "enabled": true,
                            "id": 156,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You walk to the",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.speedup = false
SSCI.pointZero = false"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Delay Swarm On",
                            "enabled": true,
                            "id": 54,
                            "matching": "substring",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "Quickly, you program a delayed swarm attack",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.delaySwarm = true"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Freeze on",
                            "enabled": true,
                            "id": 29,
                            "matching": "substring",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "You brush your fingertips across",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.freeze = true"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Freeze off",
                            "enabled": false,
                            "id": 30,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^.+has cured the effects of Frozen.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.freeze = false
SSCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Frenzy Active",
                            "enabled": true,
                            "id": 39,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^A dark wave of madness rolls through your thoughts.*$|^You have already descended into a frenzy",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.frenzy = true
SSCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Rage off",
                            "enabled": false,
                            "id": 40,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "You break out of your frenzy.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.frenzy = false"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Frenzy Down",
                            "enabled": false,
                            "id": 38,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "You break out of your frenzy.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.alert('Frenzy Down', 'white', 'red')"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Negation Active",
                            "enabled": true,
                            "id": 166,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "aura descends over you like a giant, protective shadow.$|^You are already prepared to negate damage.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.negation = true
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Negation Down",
                            "enabled": false,
                            "id": 36,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "The shadow of the Progenitor's protection springs to life around you, absorbing the damaging attack before lifting away from you, the air around you growing subtly lighter.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.alert('Negation Down', 'white', 'red')"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Multistrike Active",
                            "enabled": true,
                            "id": 20,
                            "matching": "substring",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "You focus intently to direct a portion of your swarm towards",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.multistrike = true
SSCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Multistrike Return",
                            "enabled": true,
                            "id": 19,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^The group of nanites returns back to you.$|^The nanites disperse. no longer striking",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.multistrike = false
SSCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Speedup Active",
                            "enabled": true,
                            "id": 157,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^You snap your fingers, and time starts flowing faster|^Time has already been distorted|^Time has been strangely distorted here.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.speedup = true
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Speedup Inactive",
                            "enabled": true,
                            "id": 159,
                            "matching": "exact",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "The time distortion effect ends.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.speedUp = false
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Point Zero Active",
                            "enabled": true,
                            "id": 158,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^The air crackles and contracts|^Lifting your hand, you call upon the void within|^Air swirls around a point of absolute coldness here.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.pointZero = true
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Point Zero Inactive",
                            "enabled": true,
                            "id": 160,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^The swirling point zero suddenly collapses",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.pointZero = false"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Empyreal Channeling",
                            "enabled": true,
                            "id": 165,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You reach into your connection to the void",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('my_combat')) {
    SSCI.huntingAttack()
}"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Repair Used",
                            "enabled": true,
                            "id": 167,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^You inhale a cloud of your swarm",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.healReady = false
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Repair Available",
                            "enabled": true,
                            "id": 168,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "text": "^Your nanites can again repair your body.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.healReady = true
SSCI.huntingAttack()"
                                },
                                {
                                    "action": "highlight",
                                    "highlight": "line",
                                    "highlight_backref": "1",
                                    "highlight_fg": "#82ea81",
                                    "highlight_bg": "#000000"
                                }
                            ]
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "alias",
                    "name": "Wakeup Nanoseer",
                    "enabled": true,
                    "id": 155,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "nano charge",
                            "prefix_suffix": true
                        },
                        {
                            "action": "waitfor",
                            "text": "^You start generating nanites.$|^You're already repairing your nanites.$",
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "expire": "6"
                        },
                        {
                            "action": "command",
                            "command": "nano rush on",
                            "prefix_suffix": true
                        },
                        {
                            "action": "waitfor",
                            "text": "^Inhaling a cloud of your swarm|^Your nanites are already boosting|haven.t learned",
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "expire": "6"
                        },
                        {
                            "action": "command",
                            "command": "nano protect on",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "wakeup"
                },
                {
                    "type": "trigger",
                    "name": "Queue Attack Nano",
                    "enabled": true,
                    "id": 9,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You brush your fingertips across|^Focusing on becoming more attuned",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Fury",
            "enabled": true,
            "id": 69,
            "items": [
                {
                    "type": "trigger",
                    "name": "Kithblade Shaped",
                    "enabled": true,
                    "id": 70,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Resting your hand on the hilt of",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.bladeshape = true
if (SSCI.systemEnabled === true) {
    SSCI.huntingAttack()
}"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Kithblade Unshaped",
                    "enabled": true,
                    "id": 86,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "The blade of .+ shimmers and warps.+",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.alert('bladeshape off', 'white', 'lightred')
SSCI.bladeshape = false

var a = new Audio('https://freesound.org/people/Stopmotionbros/sounds/438991/download/438991__stopmotionbros__wind.m4a')
a.play()"
                        },
                        {
                            "action": "highlight",
                            "highlight": "line",
                            "highlight_backref": "1",
                            "highlight_fg": "#ffbc78",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Fever On",
                    "enabled": true,
                    "id": 79,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Your mind extends towards the vulnerabilities of .+ body, and with your connection to the universe's energy, you begin to increase the heat in every cell, flushing .+ with a raging fever.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.fever = true
SSCI.interrupt = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Unstoppable On",
                    "enabled": true,
                    "id": 71,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Your rage overwhelms you, you become unstoppable!",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.unstoppable = true

var reflexOn = reflex_find_by_name('trigger', 'Queue Attack Fury', false, false, 'SSCI').enabled

if (SSCI.systemEnabled && reflexOn) {
    SSCI.huntingAttack()
}"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Unstoppable Off",
                    "enabled": true,
                    "id": 72,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You no longer feel unstoppable!",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.unstoppable = false
SSCI.log('NO UNSTOPPABLE', 'red')

var reflexOn = reflex_find_by_name('trigger', 'Queue Attack Fury', false, false, 'SSCI').enabled

if (SSCI.systemEnabled && reflexOn) {
    SSCI.huntingAttack()
}"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Hypertension On",
                    "enabled": true,
                    "id": 85,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^Tossing .+ to your off hand, you extend a bloodied palm towards .+ and then clench it into a fist, feeling .+ heart spasm and beat more quickly within .+ chest.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.hypertension = true"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Heal Ready",
                    "enabled": true,
                    "id": 77,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "It is safe to suffuse yourself with kith energy again.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.healReady = true

var reflexOn = reflex_find_by_name('trigger', 'Queue Attack Fury', false, false, 'SSCI').enabled

if (SSCI.systemEnabled && reflexOn) {
    SSCI.huntingAttack()
}"
                        },
                        {
                            "action": "highlight",
                            "highlight": "line",
                            "highlight_backref": "1",
                            "highlight_fg": "#51d051",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Heal Used",
                    "enabled": true,
                    "id": 78,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "The heart of distant stars and the fire at the center of every planet shimmers in your mind, and you draw upon that power, filling your body with an energy that heals your wounds and suffuses you with a flush of health.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.healReady = false

var reflexOn = reflex_find_by_name('trigger', 'Queue Attack Fury', false, false, 'SSCI').enabled

if (SSCI.systemEnabled && reflexOn) {
    SSCI.huntingAttack()
}"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Berserk On",
                    "enabled": true,
                    "id": 74,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^You go berserk, flailing .*$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.berserk = true

var reflexOn = reflex_find_by_name('trigger', 'Queue Attack Fury', false, false, 'SSCI').enabled

if (SSCI.systemEnabled && reflexOn) {
    SSCI.huntingAttack()
}"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Berserk Off",
                    "enabled": true,
                    "id": 75,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You are no longer berserk.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.berserk = false

var reflexOn = reflex_find_by_name('trigger', 'Queue Attack Fury', false, false, 'SSCI').enabled

if (SSCI.systemEnabled && reflexOn) {
    SSCI.huntingAttack()
}"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Attack after Inferno",
                    "enabled": true,
                    "id": 118,
                    "matching": "substring",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "The searing wave of your inferno engulfs",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.systemEnabled = true
SSCI.offenseEnabled = true
SSCI.infernoCharging = false

SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Queue Attack Fury",
                    "enabled": true,
                    "id": 73,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": true,
                    "text": "^You flow smoothly into the.+stance.+|^You flow out of your stance.+|^Your mind extends towards the vulnerabilities of.*$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.huntingAttack()
"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Awaken Fury",
                    "enabled": true,
                    "id": 143,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "kith harden",
                            "prefix_suffix": true
                        },
                        {
                            "action": "waitfor",
                            "text": "^You focus on hardening your skin|^Your internals are already hardened",
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "expire": "10"
                        },
                        {
                            "action": "command",
                            "command": "kith warmth",
                            "prefix_suffix": true
                        },
                        {
                            "action": "waitfor",
                            "text": "^You focus on warming up your skin|^You're already protected",
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "expire": "10"
                        },
                        {
                            "action": "command",
                            "command": "kith balancing",
                            "prefix_suffix": true
                        },
                        {
                            "action": "waitfor",
                            "text": "^You focus on your kith to prevent falling.|^You're already balancing",
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "expire": "10"
                        },
                        {
                            "action": "command",
                            "command": "kith firewreathe",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "wakeup",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Berserk Toggle - hberserk",
                    "enabled": true,
                    "id": 76,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useBerserk')) {
    set_variable('useBerserk', false)
    SSCI.useBerserk = false
    SSCI.log('BERSERK OFF', 'white')
} else {
    set_variable('useBerserk', true)
    SSCI.useBerserk = true
    SSCI.log('BERSERK ON', 'white')
}"
                        }
                    ],
                    "text": "hberserk",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Fever Toggle - hfever",
                    "enabled": true,
                    "id": 80,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useFever')) {
    set_variable('useFever', false)
    SSCI.useFever = false
    SSCI.log('FEVER OFF', 'white')
} else {
    set_variable('useFever', true)
    SSCI.useFever = true
    SSCI.log('FEVER ON', 'white')
}"
                        }
                    ],
                    "text": "hfever",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Fury Abilities - hfury",
                    "enabled": true,
                    "id": 84,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var abilities = ''
abilities += 'Berserk: ' + get_variable('useBerserk') + '\\n'
abilities += 'Fever: ' + get_variable('useFever') + '\\n'
abilities += 'Heal: ' + get_variable('useHeal') + '\\n'
abilities += 'Bladeshape: ' + SSCI.bladeshape + '\\n'
abilities += 'Desired blade shape set to: ' + get_variable('kithbladeshape') + '\\n'
abilities += 'Goal: ' + SSCI.goal + '\\n'

SSCI.log(abilities, 'white')"
                        }
                    ],
                    "text": "hfury",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Set Bladeshape",
                    "enabled": true,
                    "id": 121,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "set_variable('kithbladeshape', args[1])
SSCI.log('Set desired kithblade shape to: ' + get_variable('kithbladeshape'))"
                        }
                    ],
                    "text": "^hblade (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Inferno - inf",
                    "enabled": true,
                    "id": 116,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "KITH INFERNO",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "inf",
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 117,
                    "key": 110,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var dt = new Date()
SSCI.ttk = dt.getTime()

SSCI.infernoCharging = true

send_command('kith inferno')"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 122,
                    "key": 106,
                    "actions": [
                        {
                            "action": "command",
                            "command": "kith suffuse"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Scoundrel",
            "enabled": false,
            "id": 89,
            "items": [
                {
                    "type": "trigger",
                    "name": "Ambush Used",
                    "enabled": true,
                    "id": 91,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^Without warning, you snatch .* from your belt and fire it from the hip at .*, moving too rapidly to be spotted until the bullet is already leaving the barrel.$|^You cannot ambush anyone, as you already are fighting!$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.ambush = true
SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Rapidfire Used",
                    "enabled": true,
                    "id": 92,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Placing your hand on the hammer of .*, you quickly fire off two shots at .* in rapid succession.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.rapidfire = true"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Rapidfire Ready",
                    "enabled": true,
                    "id": 93,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You are again ready to dualshoot.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.rapidfire = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Stim Used",
                    "enabled": true,
                    "id": 95,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You jam a stim into your vein and healing nanites surge through your body.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.healReady = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Stim Ready",
                    "enabled": true,
                    "id": 96,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You can again use a stim.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.healReady = true
SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Queue Attack Scoundrel",
                    "enabled": true,
                    "id": 94,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^Drawing your shoulder back, you fling a handful.*$|^.*kicks in your grip and an explosive noise cracks.*$|^.*you quickly fire off two shots at.*$|^You jam a stim into your vein and healing nanites surge through your body.$|^Spinning.*motion is effortless and smooth.$|jingling, rattling percussion.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Spin if empty and no target",
                    "enabled": true,
                    "id": 98,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "There is nothing and nobody here of that name - find a different target for your bomb.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SSCI.bullets == 0) {
    send_command('gun spin')
}"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Construct Ripper - rip",
                    "enabled": true,
                    "id": 97,
                    "matching": "regex",
                    "whole_words": false,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "send_command('ied construct ripper from ' + args[1])"
                        }
                    ],
                    "text": "^rip (.*)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Ambush Toggle - hambush",
                    "enabled": true,
                    "id": 99,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useAmbush')) {
    set_variable('useAmbush', false)
    SSCI.useAmbush = false
    SSCI.log('AMBUSH OFF', 'white')
} else {
    set_variable('useAmbush', true)
    SSCI.useAmbush = true
    SSCI.log('AMBUSH ON', 'white')
}"
                        }
                    ],
                    "text": "hambush",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Rapidfire Toggle - hrapidfire ",
                    "enabled": true,
                    "id": 100,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useRapidfire')) {
    set_variable('useRapidfire', false)
    SSCI.useRapidfire = false
    SSCI.log('RAPIDFIRE OFF', 'white')
} else {
    set_variable('useRapidfire', true)
    SSCI.useRapidfire = true
    SSCI.log('RAPIDFIRE ON', 'white')
}"
                        }
                    ],
                    "text": "hrapidfire",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Scoundrel Abilities - hscoundrel",
                    "enabled": true,
                    "id": 101,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var abilities = ''
abilities += 'Ambush: ' + get_variable('useAmbush') + '\\n'
abilities += 'Rapidfire: ' + get_variable('useRapidfire') + '\\n'
abilities += 'Heal: ' + get_variable('useHeal') + '\\n'
abilities += 'Bullets: ' + SSCI.bullets + '\\n'

SSCI.log(abilities, 'white')"
                        }
                    ],
                    "text": "hscoundrel",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "B.E.A.S.T.",
            "enabled": false,
            "id": 102,
            "items": [
                {
                    "type": "group",
                    "name": "Configuration",
                    "enabled": true,
                    "id": 171,
                    "items": [
                        {
                            "type": "alias",
                            "name": "",
                            "enabled": true,
                            "id": 110,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "var abilities = ''
abilities += 'Heal: ' + get_variable('useHeal') + '\\n'
abilities += 'useResistance:   ' + get_variable('useResistance') + '\\n'
abilities += 'useSerrate:      ' + get_variable('useSerrate') + '\\n'
abilities += 'usePlasmaShield: ' + get_variable('usePlasmaShield') + '\\n'
abilities += 'useRamset:       ' + get_variable('useRamset') + '\\n'
abilities += 'useDampening:    ' + get_variable('useDampening') + '\\n'
abilities += 'useJamming:      ' + get_variable('useJamming') + '\\n'
abilities += 'resistance:   ' + SSCI.resistance + '\\n'
abilities += 'serrate:      ' + SSCI.serrate + '\\n'
abilities += 'plasmaShield: ' + SSCI.plasmaShield + '\\n'
abilities += 'ramset:       ' + SSCI.ramset + '\\n'
abilities += 'dampening:    ' + SSCI.dampening + '\\n'
abilities += 'jamming:      ' + SSCI.jamming + '\\n'

SSCI.log(abilities, 'white')"
                                }
                            ],
                            "text": "hbeast",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Resistance",
                            "enabled": true,
                            "id": 177,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useResistance')) {
    set_variable('useResistance', false)
    SSCI.useResistance = false
    SSCI.log('Plasma Resistance Disabled', 'white')
} else {
    set_variable('useResistance', true)
    SSCI.useResistance = true
    SSCI.log('Plasma Resistance Enabled', 'white')
}"
                                }
                            ],
                            "text": "hresistance"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Serrate",
                            "enabled": true,
                            "id": 178,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useSerrate')) {
    set_variable('useSerrate', false)
    SSCI.useSerrate = false
    SSCI.log('Serrate Disabled', 'white')
} else {
    set_variable('useSerrate', true)
    SSCI.useSerrate = true
    SSCI.log('Serrate Enabled', 'white')
}"
                                }
                            ],
                            "text": "hserrate"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Plasma Shield",
                            "enabled": true,
                            "id": 179,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('usePlasmaShield')) {
    set_variable('usePlasmaShield', false)
    SSCI.usePlasmaShield = false
    SSCI.log('Plasma Shield Disabled', 'white')
} else {
    set_variable('usePlasmaShield', true)
    SSCI.usePlasmaShield = true
    SSCI.log('Plasma Shield Enabled', 'white')
}"
                                }
                            ],
                            "text": "hplasmashield"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Ramset",
                            "enabled": true,
                            "id": 180,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useRamset')) {
    set_variable('useRamset', false)
    SSCI.useRamset = false
    SSCI.log('Ramset Disabled', 'white')
} else {
    set_variable('useRamset', true)
    SSCI.useRamset = true
    SSCI.log('Ramset Enabled', 'white')
}"
                                }
                            ],
                            "text": "hramset"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Dampening",
                            "enabled": true,
                            "id": 181,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useDampening')) {
    set_variable('useDampening', false)
    SSCI.useDampening = false
    SSCI.log('Dampening Disabled', 'white')
} else {
    set_variable('useDampening', true)
    SSCI.useDampening = true
    SSCI.log('Dampening Enabled', 'white')
}"
                                }
                            ],
                            "text": "hdampening"
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Jamming",
                            "enabled": true,
                            "id": 182,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('useJamming')) {
    set_variable('useJamming', false)
    SSCI.useJamming = false
    SSCI.log('Jamming Disabled', 'white')
} else {
    set_variable('useJamming', true)
    SSCI.useJamming = true
    SSCI.log('Jamming Enabled', 'white')
}"
                                }
                            ],
                            "text": "hjamming"
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Shortcuts",
                    "enabled": true,
                    "id": 175,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Suit Contingency",
                            "enabled": true,
                            "id": 104,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "suit contingency",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "con",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Overclock",
                            "enabled": true,
                            "id": 105,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "suit overclock",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "oc",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Heal",
                            "enabled": true,
                            "id": 172,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "suit support",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "heal"
                        },
                        {
                            "type": "alias",
                            "name": "Flying",
                            "enabled": true,
                            "id": 173,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "command",
                                    "command": "suit jumpjets",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "fly"
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Ability Activations",
                    "enabled": true,
                    "id": 170,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Plasma Resistance Active",
                            "enabled": true,
                            "id": 183,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You deploy extra heat sinks|^Your extra heat sinks are already",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.resistance = true
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Serrate Active",
                            "enabled": true,
                            "id": 184,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You rotate your wristblade|^You're already using",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.serrate = true
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Ramset Active",
                            "enabled": true,
                            "id": 185,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You key in a command and feel a thud|^You're already employing",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.ramset = true
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Dampening Active",
                            "enabled": true,
                            "id": 186,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You activate your B\\.E\\.A\\.S\\.T\\.'s EM shielding protocol\\.$|^You're already utili.ing measures to mitigate EM attacks\\.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.dampening = true
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Jamming Active",
                            "enabled": true,
                            "id": 187,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^You engage your radar jamming|^You are already jamming",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.jamming = true
SSCI.huntingAttack()"
                                }
                            ]
                        },
                        {
                            "type": "trigger",
                            "name": "Backhand Used",
                            "enabled": true,
                            "id": 103,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^You overdrive your suit's movement circuits, delivering a vicious backhanded blow.*",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.backhand = true
SSCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Support Used",
                            "enabled": true,
                            "id": 107,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^You activate your suit's emergency life support system.*$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.healReady = false
SSCI.huntingAttack()"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Support Ready",
                            "enabled": true,
                            "id": 108,
                            "matching": "exact",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "Your HUD indicates that you may use your life support system once again.",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.healReady = true
SSCI.huntingAttack()"
                                },
                                {
                                    "action": "highlight",
                                    "highlight": "line",
                                    "highlight_backref": "1",
                                    "highlight_fg": "#6dd4e1",
                                    "highlight_bg": "#000000"
                                }
                            ],
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Queue Attack BEAST",
                    "enabled": true,
                    "id": 106,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^With servo-assisted might, you drive your wristblade.*$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Wakeup BEAST",
                    "enabled": true,
                    "id": 176,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "command",
                            "command": "plasma heatup on",
                            "prefix_suffix": true
                        }
                    ],
                    "text": "wakeup"
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Engineer",
            "enabled": false,
            "id": 109,
            "items": [
                {
                    "type": "group",
                    "name": "Turret Construction",
                    "enabled": true,
                    "id": 129,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Construct Turret",
                            "enabled": true,
                            "id": 128,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (args[1] == '' || args[2] == '') {
    SSCI.log('Usage: hturret <mod> <weapon> <follow up command>', 'darkyellow')
} else {
    set_variable('turretMod', args[1])
    set_variable('turretWeapon', args[2])
    set_variable('turretFollowup', args[3])
    set_variable('turretAlias', true)
    send_command('turret construct turret')
}
"
                                }
                            ],
                            "text": "hturret ([a-z]+) ([a-z]+)[ ]?(.*)",
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Frame Constructed",
                            "enabled": true,
                            "id": 130,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Circuitboards, robotic servos, power sources, and an operating system come together under your capable hands to form a modular weapons turret",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('turretAlias') == true) {
    send_command('turret install ' + get_variable('turretWeapon'))
}"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Weapon Mounted",
                            "enabled": true,
                            "id": 131,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Smoothly, you socket the .* barrel|That barrel is already installed on the turret",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('turretAlias') != true) {return;}

if (get_variable('turretMod').toUpperCase() == 'QPC') {
    send_command('gadget construct qpc')
} else {
    send_command('turret mod ' + get_variable('turretMod'))
    if (get_variable('turretFollowup') != '') {send_command(get_variable('turretFollowup'))}
    set_variable('turretAlias', false)
    SSCI.log('Turret ready!', 'white')
}"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Mod Mounted",
                            "enabled": true,
                            "id": 133,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Metal ratchets satisfyingly into place and code whirrs down",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('turretAlias') != true) {return;}
send_command(get_variable('turretFollowup'))
set_variable('turretAlias', false)
SSCI.log('Turret ready!', 'white')"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "QPC Ready",
                            "enabled": true,
                            "id": 132,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Using your vast engineering knowledge, you effortlessly construct a cylindrical quantum power cell",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('turretAlias') != true) {
    return;
} else if (get_variable('turretMod').toUpperCase() == 'QPC') {
    send_command('turret mod qpc')
}"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Deploy Sentry Turret",
                            "enabled": true,
                            "id": 134,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "send_command('turret deploy ' + args[1])"
                                },
                                {
                                    "action": "waitfor",
                                    "text": "Dropping a turret with a mounted flamethrower barrel",
                                    "matching": "substring",
                                    "whole_words": false,
                                    "case_sensitive": false,
                                    "expire": "10"
                                },
                                {
                                    "action": "command",
                                    "command": "workstation deploy",
                                    "prefix_suffix": false
                                },
                                {
                                    "action": "waitfor",
                                    "text": "You fold down the legs of your workstation",
                                    "matching": "substring",
                                    "whole_words": false,
                                    "case_sensitive": false,
                                    "expire": "10"
                                },
                                {
                                    "action": "command",
                                    "command": "turret sentrymode",
                                    "prefix_suffix": true
                                },
                                {
                                    "action": "waitfor",
                                    "text": "Fingers whirring across the holokeyboard",
                                    "matching": "substring",
                                    "whole_words": false,
                                    "case_sensitive": false,
                                    "expire": "10"
                                },
                                {
                                    "action": "command",
                                    "command": "workstation pack",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "^deploysentry[ ]?([0-9]*)$",
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Utility",
                    "enabled": true,
                    "id": 136,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Airdrop Return",
                            "enabled": true,
                            "id": 123,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^An aerodynamic drone flies in, decelerating rapidly. It drops a supply of spare parts into your hands.$",
                            "actions": [
                                {
                                    "action": "highlight",
                                    "highlight": "line",
                                    "highlight_backref": "1",
                                    "highlight_fg": "#00c7ff",
                                    "highlight_bg": "#000000"
                                },
                                {
                                    "action": "script",
                                    "script": "if (get_variable('refillParts') == true) {
    if (SSCI.parts < 60) {
        send_command('bot airdrop')
    } else {
        set_variable('refillParts', false)
    }
}"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Refill Parts",
                            "enabled": true,
                            "id": 127,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "set_variable('refillParts', true)
send_command('bot airdrop')
"
                                }
                            ],
                            "text": "^hfillParts$",
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Stimjector Used",
                    "enabled": true,
                    "id": 111,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You activate your stimjector, feeling a rush of vitality as it releases healing nanites into your bloodstream.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.healReady = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Stimjector Ready",
                    "enabled": true,
                    "id": 112,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You can again use a stimjector.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.healReady = true
SSCI.huntingAttack()
//SSCI.log('stimjector ready', 'cyan')"
                        },
                        {
                            "action": "highlight",
                            "highlight": "line",
                            "highlight_backref": "1",
                            "highlight_fg": "#00efff",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Repeat Active",
                    "enabled": true,
                    "id": 137,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You build an instruction loop",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.repeat = false
SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Repeat Available",
                    "enabled": true,
                    "id": 138,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You can again order a repeated attack.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.repeat = true"
                        },
                        {
                            "action": "highlight",
                            "highlight": "line",
                            "highlight_backref": "1",
                            "highlight_fg": "#fbbe80",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Burrowbot Active",
                    "enabled": true,
                    "id": 139,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "and starts burrowing into its flesh.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.wormDeployed = true
SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Burrowbot Returned",
                    "enabled": true,
                    "id": 140,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^A knife-mawed burrowbot violently emerges|ceases burrowing",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.wormDeployed = false
SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Queue Attack Engineer",
                    "enabled": true,
                    "id": 114,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^A crane-armed carrybot claws .* shredding .* skin.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Turret Unpowered",
                    "enabled": true,
                    "id": 150,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": true,
                    "text": "doesn't have enough power to attack.$",
                    "actions": [
                        {
                            "action": "highlight",
                            "highlight": "line",
                            "highlight_backref": "1",
                            "highlight_fg": "#f863df",
                            "highlight_bg": "#000000"
                        }
                    ]
                },
                {
                    "type": "alias",
                    "name": "List Ability Configuration",
                    "enabled": true,
                    "id": 113,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var abilities = ''
abilities += 'Heal:          ' + get_variable('useHeal') + '\\n'
abilities += 'Repeat Attack: ' + get_variable('engineerRepeatAttack') + '\\n'
abilities += 'Use Repeat:    ' + get_variable('useRepeat') + '\\n'
abilities += 'Repeat Avail:  ' + SSCI.repeat + '\\n'
abilities += 'Use Worm:      ' + get_variable('useWorm') + '\\n'
abilities += 'Worm Deployed: ' + SSCI.wormDeployed + '\\n'
abilities += 'Use Release:   ' + get_variable('useRelease') + '\\n'
abilities += 'QPC Boost:     ' + get_variable('useQPCBoost') + '\\n'

SSCI.log(abilities, 'white')"
                        }
                    ],
                    "text": "hengineer",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Enable/Disable Repeat",
                    "enabled": true,
                    "id": 135,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (args[1] != 'clear') {
    set_variable('engineerRepeatAttack', args[1])
    set_variable('useRepeat', true)
    SSCI.log('Enabled bot repeat with attack: ' + args[1], 'white')
} else {
    set_variable('engineerRepeatAttack', '')
    set_variable('useRepeat', false)
    SSCI.log('Disabled bot repeat command', 'white')
}"
                        }
                    ],
                    "text": "hrepeat (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Enable/Disable Worm",
                    "enabled": true,
                    "id": 141,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useWorm')) {
    set_variable('useWorm', false)
    SSCI.log('Burrowbot Worm Attack disabled', 'white')
} else {
    set_variable('useWorm', true)
    SSCI.log('Burrowbot Worm Attack enabled', 'white')
}"
                        }
                    ],
                    "text": "hworm",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Enable/Disable Worm Release",
                    "enabled": true,
                    "id": 142,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useRelease')) {
    set_variable('useRelease', false)
    SSCI.log('Burrowbot Worm Release Attack disabled', 'white')
} else {
    set_variable('useRelease', true)
    SSCI.log('Burrowbot Worm Release Attack enabled', 'white')
}"
                        }
                    ],
                    "text": "hrelease",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Enable/Disable QPCBoost",
                    "enabled": true,
                    "id": 151,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useQPCBoost')) {
    set_variable('useQPCBoost', false)
    SSCI.log('QPC Boost after kill disabled', 'white')
} else {
    set_variable('useQPCBoost', true)
    SSCI.log('QPC Boost after kill enabled', 'white')
}"
                        }
                    ],
                    "text": "hqpcboost"
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Combat",
            "enabled": true,
            "id": 64,
            "items": [
                {
                    "type": "group",
                    "name": "Chat",
                    "enabled": true,
                    "id": 65,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Target call - tt <name>",
                            "enabled": false,
                            "id": 67,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.target = args[1]
set_variable('tar', args[1])
send_command('st ' + args[1])
send_command('crt Target: ' + args[1])"
                                }
                            ],
                            "text": "tt (.+)",
                            "items": []
                        }
                    ],
                    "actions": []
                }
            ],
            "actions": []
        }
    ],
    "description": "SSCI v1.0"
}