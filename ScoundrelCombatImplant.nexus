{
    "type": "group",
    "name": "starwraith scoundrel combat implant",
    "enabled": true,
    "id": 1,
    "items": [
        {
            "type": "function",
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "// Changelog
// 20190113T1503EST: Copied main system to separate class systems

// Place any code here you'd like to autorun when the system is loaded
send_command('wakeup')
SSCI = {
// Core Implant Code
    noticecolor: 'gold',
    packagename: 'starwraith scoundrel combat implant',
    shortname: 'SSCI',
    notice: function(text) {
        display_notice(\"[\" + this.shortname + \"] \" + text, this.noticecolor);
    },
    loaded: function() {
        //Send implant to browser log for debugging
        console.log(this)
        this.notice(\"Starwraith Scoundrel Combat Implant v1.0 Loaded. Good hunting, and good death.\\n\");
    },
    helpbox: function(title,text) {
        var helptext = \"<div class=\\\"mono\\\"><span style=\\\"color: #ffffff; \\\"><span style=\\\"background-color: #0000a0 \\\">\" + title + \"</span></span></div>\";
        helptext += \"<div class=\\\"mono\\\">\" + text.replace(\"\\n\",\"</div><div class=\\\"mono\\\">\") + \"</div>\";
        client.display_help_window(helptext);
    },
    disableGroup: function(name) {
        var group = reflex_find_by_name('group', name, false, false, this.packagename)
        reflex_disable(group)
    },
    enableGroup: function(name) {
        var group = reflex_find_by_name('group', name, false, false, this.packagename)
        reflex_enable(group)
    },
    log: function (x, fgcolor, bgcolor) {
        let type = typeof x
        switch(type) {
          case 'number':
          case 'string':
          case 'boolean':
            display_notice(x.toString(), fgcolor, bgcolor)
            break;
          case 'object':
            for (var prop in x) {
              display_notice(`${prop}: ${x[prop]}`, fgcolor, bgcolor)
            }
            break;
          case 'undefined':
            display_notice('undefined', fgcolor, bgcolor)
            break;
          default:
            display_notice('wtf is this')
        }
    },
    alert: function (text, fgcolor, bgcolor) {
        text = text.toUpperCase()
        let fullText = '-'.repeat(text.length+1) + '-------\\n--  '+ text + '  --\\n-------' + '-'.repeat(text.length+1)
        display_notice(fullText, fgcolor, bgcolor)
    },
    debugMessage: function (text) {
        if (get_variable('debug')) {
            this.log(text, 'white', 'black')
        }
    },
//System Variables
    goal: 'hunt2',
    matchList: get_variable('matchList'),
    systemEnabled: true,
    offenseEnabled: false,
    break: get_variable('break'),
    itemsInRoom: [],
    damageThisFight: 0,
    ttk: 0,
    targetHealth: 0,
    interrupt: false,
//Character    
    attack: get_variable('huntingAttack') + ' ',
    class: '',
    health: 0,
    maxHealth: 0,
    useHeal: get_variable('useHeal'),
    healReady: true,
//Scoundrel
    bullets: 0,
    ambush: false,
    useAmbush: get_variable('useAmbush'),
    rapidfire: false,
    useRapidfire: get_variable('useRapidfire'),
//Combat functions 
    findTarget: function() {
        var itemList = this.itemsInRoom
        var killList = get_variable('killList')
        var targetFound = false
        
        //Match room order
        if (!this.matchList) {
            for (i=0; i<itemList.length; i++) {
                for (x=0; x<killList.length; x++) {
                    if (itemList[i].name.includes(killList[x]) && itemList[i].attrib === 'm' && targetFound === false) {
                        set_variable('tar', itemList[i].id)
                        send_command('settarget ' + itemList[i].id)
                        targetFound = true
                        display_notice('New target: '+itemList[i].name, 'red', 'black')
                    }
                }
            }
        } else { //Match priority/list order
            for (i=0; i<killList.length; i++) {
                for (x=0; x<itemList.length; x++) {
                    if (itemList[x].name.includes(killList[i]) && itemList[x].attrib === 'm' && targetFound === false) {
                        set_variable('tar', itemList[x].id)
                        send_command('settarget ' + itemList[x].id)
                        targetFound = true
                        display_notice('New target: '+itemList[x].name, 'red', 'black')
                    }
                }
            }
        }

        if (!targetFound) {
            //display_notice('No Target Found', 'red', 'black')
            set_variable('tar', '')
        }
    },
    huntingAttack: function() {
        
        if (!this.systemEnabled) {return}
        var command = ''
        

        if (this.health / this.maxHealth < .8 && this.healReady && this.useHeal) {
            send_command('stim')
            return
        } else if (this.offenseEnabled == false || get_variable('tar') == '') {
            return
        } else if (this.bullets == 0) {
            command += 'ied fling ripper at '
        } else if (this.bullets == 1) {
            command += 'gun crackshot '
        } else if (!this.ambush && this.useAmbush && this.bullets) {
            command += 'gun ambush '
        } else if (!this.rapidfire && this.useRapidfire) {
            command += 'gun rapidfire '
        } else {
            command += 'gun crackshot '
        }
          
        command += get_variable('tar')
        send_command(command)
    }
}

SSCI.loaded();",
            "items": []
        },
        {
            "type": "function",
            "name": "onGMCP",
            "enabled": true,
            "id": 3,
            "code": "// Place any code here you'd like to run when a GMCP message is received
// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"

GMCP[args.gmcp_method] = args.gmcp_args

/* ------------------------------------------ CHARACTER STUFF ----------------------------------- */

if (args.gmcp_method == \"Char.Vitals\") {

    // Track health changes
    var change = SSCI.health - args.gmcp_args.hp;
   
    if (change > 0) {
        SSCI.log('Damage taken: ' + change, 'yellow')
    } else if (change < 0) {
        SSCI.log('Damage healed: ' + Math.abs(change), '#6bdaee')
    }
    
    SSCI.health = args.gmcp_args.hp
    SSCI.maxHealth = args.gmcp_args.maxhp

    SSCI.bullets = args.gmcp_args.bl
}

/* ----------------------------------- DEFENCES AND BUFFS --------------------------------------- */

//if (args.gmcp_method == 'Char.Defences.Add') {
    
    //Fury
    //if (args.gmcp_args.name == 'Oblivion: Conqueror')  {
    //    SSCI.empyreal = 'Conqueror'
    //}
//}

/* -------------------------------------------- ITEMS IN ROOM ----------------------------------- */

//Get Items In Room
if (args.gmcp_method == \"Char.Items.List\") {
    SSCI.itemsInRoom = args.gmcp_args['items']
}

//Remove items when items leave
if (args.gmcp_method == \"Char.Items.Remove\") {
    let itemLeaving = args.gmcp_args['item']
    
    //Find index of item
    SSCI.itemsInRoom = SSCI.itemsInRoom.filter(item => item.id !== itemLeaving.id);
    
}

//Add items when items enter
if (args.gmcp_method == \"Char.Items.Add\") {
    let itemJoining = args.gmcp_args['item']
    
    //Find index of item
    SSCI.itemsInRoom.push(itemJoining);
    
    if (SSCI.systemEnabled === true) {
        if (!get_variable('tar')) {
            SSCI.findTarget()
        }
    }
}

/* -------------------------------------------- PLAYERS IN ROOM ----------------------------------- */
if (args.gmcp_method == \"Room.Players\") {
    SSCI.playersInRoom = args.gmcp_args
}

/* --------------------------------------------- HELPERS --------------------------------- */
if (args.gmcp_method == \"Room.Info\" && SSCI.systemEnabled === true) {
    SSCI.findTarget()
}

if (args.gmcp_method == \"IRE.Target.Info\") {
    SSCI.targetHealth = args.gmcp_args['hpperc'].slice(0, -1)
}",
            "items": []
        },
        {
            "type": "group",
            "name": "Auto Hunt",
            "enabled": true,
            "id": 8,
            "items": [
                {
                    "type": "group",
                    "name": "Setup",
                    "enabled": true,
                    "id": 41,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Combat Implant Setup - hsetup",
                            "enabled": true,
                            "id": 25,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.log('-- Hunting List Setup.  Use \\'hsave\\' to keep a backup.  \\'hload\\' will load your backup.', 'white', 'black')
SSCI.log('-- Use \\'hadd\\' <name> to add to the list and \\'hremove\\' <name> to remove items from this list. \\'hshow\\' will show the items on your list.', 'white', 'black')
SSCI.log('-- Use \\'hattack\\' <attackName> to make it your primary attack that will be auto used.', 'white')
SSCI.log('-- Use \\'hlist\\' to switch between room and priority list. Use \\'hup\\' or \\'hdown\\' <name> to increase or decrease an item on the priority list.', 'white')
SSCI.log('-- Make sure you use \\'config usequeueing on\\'.  Then you can use other attacks to overwrite auto attacks.', 'white')

if (get_variable('killList')       == undefined) {set_variable('killList', ['rockhopper'])}
if (get_variable('debug')          == undefined) {set_variable('debug', false)}
if (get_variable('matchList')      == undefined) {set_variable('matchList', true)}
if (get_variable('break')          == undefined) {set_variable('break', true)}
if (get_variable('useHeal')        == undefined) {set_variable('useHeal', true)}
if (get_variable('useAmbush')      == undefined) {set_variable('useAmbush', false)}
if (get_variable('useRapidfire')   == undefined) {set_variable('useRapidfire', false)}"
                                }
                            ],
                            "text": "hsetup",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "System Reset",
                            "enabled": true,
                            "id": 126,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.log('-- Combat Implant has been reset to factory settings.', 'white', 'black')
SSCI.log('-- If you have previously backed up your kill list you may use \\'hload\\' to reload it', 'white', 'black')

set_variable('killList', ['rockhopper'])
set_variable('debug', false)
set_variable('useHeal', true)
set_variable('useAmbush', false)
set_variable('useRapidfire', false)
set_variable('matchList', true)
set_variable('break', true)"
                                }
                            ],
                            "text": "^hreset$",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Change Auto Attack",
                            "enabled": true,
                            "id": 26,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.attack = args[1] + ' '
set_variable('huntingAttack', args[1] + ' ')
display_notice('Attack set to: ' + args[1], 'white', 'black')"
                                }
                            ],
                            "text": "hattack (.+)",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable List Mode - hlist",
                            "enabled": true,
                            "id": 56,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('matchList')) {
    SSCI.matchList = false
    set_variable('matchList', false)
    SSCI.log('Will match room listing', 'white')
} else {
    SSCI.matchList = true
    set_variable('matchList', true)
    SSCI.log('Will match priority listing', 'white')
}"
                                }
                            ],
                            "text": "hlist",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Break After Kill Mode - hbreak",
                            "enabled": true,
                            "id": 82,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('break')) {
    SSCI.break = false
    set_variable('break', false)
    SSCI.log('Will continue after kill.', 'white')
} else {
    SSCI.break = true
    set_variable('break', true)
    SSCI.log('Will break after kill.', 'white')
}"
                                }
                            ],
                            "text": "hbreak",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Break Threshold",
                            "enabled": true,
                            "id": 169,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "set_variable('breakThreshold', args[1])
SSCI.breakThreshold = args[1]"
                                }
                            ],
                            "text": "^hbreakthreshold ([0-9]*)$"
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Slain",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^(You) have slain a.*$|^.*has been slain by (.+)\\.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.ambush = false

//var a = new Audio('https://freesound.org/people/adcbicycle/sounds/13934/download/13934__adcbicycle__6.wav')
//a.play()

var autoList = ['You', 'Chronoxi Starwraith', 'Feraluna Starwraith', 'Mee', 'Casimar', 'Albion', 'Mykel']
var onList = ''

if (args[1]) {
    onList = autoList.includes(args[1])
} else {
    onList = autoList.includes(args[2])
}

if (SSCI.systemEnabled === true && onList) {
    SSCI.targetHealth = 0
    send_command('clearqueue')
    SSCI.findTarget()

    if (SSCI.class == 'Engineer' && get_variable('useQPCBoost')) {
        send_command('qpcboost')
    }

    if (SSCI.break) {
        SSCI.offenseEnabled = false
    }
    
    SSCI.huntingAttack()
}

var slainMessage = ''
var now = new Date()
if (SSCI.damageThisFight > 0 && SSCI.ttk > 0){
    slainMessage = SSCI.damageThisFight + ' damage done this fight. | TTK: ' + (now.getTime() - SSCI.ttk)/1000 + 's | DPS: ' + Math.round(SSCI.damageThisFight / ((now.getTime() - SSCI.ttk)/1000))
} else if (SSCI.damageThisFight > 0) {
    slainMessage = SSCI.damageThisFight + ' damage done this fight.'
} else if (SSCI.ttk > 0) {
    slainMessage = 'TTK: ' + (now.getTime() - SSCI.ttk)/1000 + 's'
}

if (SSCI.damageThisFight > 0 || SSCI.ttk > 0){
    SSCI.alert(slainMessage, 'lightgreen', 'darkblue')
}

SSCI.ttk = 0
SSCI.damageThisFight = 0
SSCI.interrupt = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Crash - AUTO OFF",
                    "enabled": true,
                    "id": 18,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^You prepare to crash out of the room.*$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.systemEnabled = false
display_notice('AUTO OFF', 'white', 'black')"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 10,
                    "key": 96,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('debug') == true) {SSCI.log('I am attacking ' + get_variable('tar'), 'white')}
SSCI.systemEnabled = true
SSCI.offenseEnabled = true
SSCI.huntingAttack()"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 32,
                    "key": 111,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SSCI.systemEnabled === true) {
  SSCI.systemEnabled = false
  display_notice(\"Combat implant disabled\", 'white', 'black')
} else {
  SSCI.systemEnabled = true
  display_notice(\"Combat implant enabled\", 'white', 'black')
}"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Heal",
                    "enabled": true,
                    "id": 115,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SSCI.class == 'Nanoseer') {
  send_command('NANO REPAIR')
} else if (SSCI.class == 'Fury') {
  send_command('KITH SUFFUSE')
} else if (SSCI.class == 'Scoundrel') {
  send_command('STIM')
} else if (SSCI.class == 'B.E.A.S.T.') {
  send_command('suit support')
} else if (SSCI.class == 'Engineer') {
  send_command('operate stimjector')
}"
                        }
                    ],
                    "text": "h",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Add to hunting list - hadd <mob>",
                    "enabled": true,
                    "id": 13,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "display_notice('Adding: ' + args[1] + ' to list', 'white', 'black')
let newList = get_variable('killList')
newList.push(args[1])
set_variable('killList', newList)"
                        }
                    ],
                    "text": "hadd (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Remove from hunting list - hremove <mob>",
                    "enabled": true,
                    "id": 14,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "display_notice('Removing: ' + args[1] + ' from list', 'white', 'black')

let newList = get_variable('killList')
newList = newList.filter(item => item !== args[1]);

set_variable('killList', newList)"
                        }
                    ],
                    "text": "hremove (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Save Hunting List To Backup - hsave",
                    "enabled": true,
                    "id": 15,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let newSave = get_variable('killList')
set_variable('killListBackup', newSave)
display_notice('Hunt List Saved', 'white', 'black')
"
                        }
                    ],
                    "text": "hsave",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Load Hunting List From Backup - hload",
                    "enabled": true,
                    "id": 16,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let backupList = get_variable('killListBackup')
set_variable('killList', backupList)
display_notice('Hunt List Loaded from Backup', 'white', 'black')"
                        }
                    ],
                    "text": "hload",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Show Hunting Targets - hshow",
                    "enabled": true,
                    "id": 17,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let killList = get_variable('killList')
for (i=0; i<killList.length; i++) {
    display_notice(killList[i], 'white', 'black')
}"
                        }
                    ],
                    "text": "hshow",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Item Priority - hup/hdown <mob>",
                    "enabled": true,
                    "id": 52,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var list = get_variable('killList')
var nameIndex = list.indexOf(args[2])
var name = list[nameIndex]

if (list[nameIndex-1] && nameIndex && args[1] === 'hup') {
    list[nameIndex] = list[nameIndex - 1]
    list[nameIndex-1] = name
} else if (list[nameIndex+1] && nameIndex && args[1] === 'hdown') {
    list[nameIndex] = list[nameIndex + 1]
    list[nameIndex+1] = name
}

set_variable('killList', list)

for (i=0; i<list.length; i++) {
    if(list[i] === name){
        display_notice(list[i], 'gold', 'black')
    } else {
        display_notice(list[i])
    }
}"
                        }
                    ],
                    "text": "^(hup|hdown) (.+)$",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Heal Toggle - hheal",
                    "enabled": true,
                    "id": 81,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useHeal')) {
    set_variable('useHeal', false)
    SSCI.useHeal = false
    SSCI.log('HEAL OFF', 'white')
} else {
    set_variable('useHeal', true)
    SSCI.useHeal = true
    SSCI.log('HEAL ON', 'white')
}"
                        }
                    ],
                    "text": "hheal",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Kill",
                    "enabled": true,
                    "id": 120,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('debug') == true) {SSCI.log('I am attacking ' + get_variable('tar'), 'white')}
SSCI.systemEnabled = true
SSCI.offenseEnabled = true
SSCI.huntingAttack()"
                        }
                    ],
                    "text": "k",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Generic",
            "enabled": true,
            "id": 4,
            "items": [
                {
                    "type": "group",
                    "name": "Interrupts",
                    "enabled": true,
                    "id": 147,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Super - Interrupt",
                            "enabled": true,
                            "id": 148,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^Throwing back its grizzled head, a sly cania lets out a high-pitched, wavering howl.$|^A sluggish atzaparaki shakes off some of its torpor and draws in a deep breath, its sides beginning to swell alarmingly.$|^Light begins to focus deep within the body of a salt-crusted quartz creeper, growing to an almost painful radiance.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.interrupt = true

SSCI.alert('interrupting super', 'white', 'blue')
SSCI.huntingAttack()
"
                                }
                            ],
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Left battle",
                    "enabled": true,
                    "id": 6,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You are no longer in the throes of battle.",
                    "actions": [
                        {
                            "action": "highlight",
                            "highlight": "match",
                            "highlight_backref": "1",
                            "highlight_fg": "#9488f6",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Hide Queue",
                    "enabled": false,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[Queue\\]: You will attempt to do.*$|^Your swarm is already focused upon a multistrike.*$",
                    "actions": [
                        {
                            "action": "gag"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Add Damage Per Kill",
                    "enabled": true,
                    "id": 57,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Damage Dealt: (.+) .+",
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SSCI.ttk == 0) {
    var now = new Date()
    SSCI.ttk = now.getTime()
}
SSCI.damageThisFight += parseInt(args[1])"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Not following",
                    "enabled": true,
                    "id": 87,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "(.+) is no longer following you.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.log(args[1] + ' Stopped Following!', 'darkred')"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Crash + Direction - c<dir>",
                    "enabled": true,
                    "id": 33,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "send_command('cq')
send_command('crash ' + args[1])"
                        }
                    ],
                    "text": "c(nw|ne|se|sw|n|s|e|w|u|d|in|out)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Javascript - js",
                    "enabled": true,
                    "id": 31,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.log(eval(args[1]))"
                        }
                    ],
                    "text": "^js (.+)$",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Scoundrel",
            "enabled": true,
            "id": 89,
            "items": [
                {
                    "type": "trigger",
                    "name": "Ambush Used",
                    "enabled": true,
                    "id": 91,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^Without warning, you snatch .* from your belt and fire it from the hip at .*, moving too rapidly to be spotted until the bullet is already leaving the barrel.$|^You cannot ambush anyone, as you already are fighting!$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.ambush = true
SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Rapidfire Used",
                    "enabled": true,
                    "id": 92,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Placing your hand on the hammer of .*, you quickly fire off two shots at .* in rapid succession.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.rapidfire = true"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Rapidfire Ready",
                    "enabled": true,
                    "id": 93,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You are again ready to dualshoot.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.rapidfire = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Stim Used",
                    "enabled": true,
                    "id": 95,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You jam a stim into your vein and healing nanites surge through your body.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.healReady = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Stim Ready",
                    "enabled": true,
                    "id": 96,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You can again use a stim.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.healReady = true
SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Queue Attack Scoundrel",
                    "enabled": true,
                    "id": 94,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^Drawing your shoulder back, you fling a handful.*$|^.*kicks in your grip and an explosive noise cracks.*$|^.*you quickly fire off two shots at.*$|^You jam a stim into your vein and healing nanites surge through your body.$|^Spinning.*motion is effortless and smooth.$|jingling, rattling percussion.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SSCI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Spin if empty and no target",
                    "enabled": true,
                    "id": 98,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "There is nothing and nobody here of that name - find a different target for your bomb.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SSCI.bullets == 0) {
    send_command('gun spin')
}"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Construct Ripper - rip",
                    "enabled": true,
                    "id": 97,
                    "matching": "regex",
                    "whole_words": false,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "send_command('ied construct ripper from ' + args[1])"
                        }
                    ],
                    "text": "^rip (.*)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Ambush Toggle - hambush",
                    "enabled": true,
                    "id": 99,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useAmbush')) {
    set_variable('useAmbush', false)
    SSCI.useAmbush = false
    SSCI.log('AMBUSH OFF', 'white')
} else {
    set_variable('useAmbush', true)
    SSCI.useAmbush = true
    SSCI.log('AMBUSH ON', 'white')
}"
                        }
                    ],
                    "text": "hambush",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Rapidfire Toggle - hrapidfire ",
                    "enabled": true,
                    "id": 100,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useRapidfire')) {
    set_variable('useRapidfire', false)
    SSCI.useRapidfire = false
    SSCI.log('RAPIDFIRE OFF', 'white')
} else {
    set_variable('useRapidfire', true)
    SSCI.useRapidfire = true
    SSCI.log('RAPIDFIRE ON', 'white')
}"
                        }
                    ],
                    "text": "hrapidfire",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Scoundrel Abilities - hscoundrel",
                    "enabled": true,
                    "id": 101,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var abilities = ''
abilities += 'Ambush: ' + get_variable('useAmbush') + '\\n'
abilities += 'Rapidfire: ' + get_variable('useRapidfire') + '\\n'
abilities += 'Heal: ' + get_variable('useHeal') + '\\n'
abilities += 'Bullets: ' + SSCI.bullets + '\\n'

SSCI.log(abilities, 'white')"
                        }
                    ],
                    "text": "hscoundrel",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Combat",
            "enabled": true,
            "id": 64,
            "items": [
                {
                    "type": "group",
                    "name": "Chat",
                    "enabled": true,
                    "id": 65,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Target call - tt <name>",
                            "enabled": false,
                            "id": 67,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SSCI.target = args[1]
set_variable('tar', args[1])
send_command('st ' + args[1])
send_command('crt Target: ' + args[1])"
                                }
                            ],
                            "text": "tt (.+)",
                            "items": []
                        }
                    ],
                    "actions": []
                }
            ],
            "actions": []
        }
    ],
    "description": "SSCI v1.0"
}