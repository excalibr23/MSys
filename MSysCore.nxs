{"type":"group","name":"msyscore","enabled":true,"id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"MSys = {\n//System Variables\n    coreVersion:     1.5,\n    shortname:       'CORE',\n    goal:            'hunt2',\n    systemEnabled:   true,\n    offenseEnabled:  true,\n\n    //Configurations\n    attack:          get_variable('huntingAttack') + ' ',\n    break:           get_variable('break'),\n    breakResume:     get_variable('breakResume'),\n    escapeThreshold: get_variable('escapeThreshold'),\n    useEscapeAggro:  get_variable('useEscapeAggro'),\n    matchList:       get_variable('matchList'),\n    showNotices:     get_variable('showNotices'),\n    showXP:          get_variable('showXP'),\n    hunt:            get_variable('hunt'),\n\n    // Room\n    itemsInRoom:     [],\n    room: {id: 0},\n    \n    // Hunting\n    path: [{id: 1219, next:\"E\"},\n           {id: 1217, next:\"E\"},\n           {id: 1216, next:\"N\"},\n           {id: 1214, next:\"SE\"},\n           {id: 1213, next:\"SE\"},\n           {id: 1215, next:\"W\"},\n           {id: 1218, next:\"S\"}, \n           {id: 1236, next:\"S\"}, \n           {id: 1235, next:\"E\"},\n           {id: 1234, next:\"SW\"},\n           {id: 1233, next:\"SW\"},\n           {id: 1232, next:\"N\"},\n           {id: 1231, next:\"W\"}, \n           {id: 1230, next:\"W\"}, \n           {id: 1227, next:\"NW\"}, \n           {id: 1225, next:\"N\"}, \n           {id: 1224, next:\"N\"}, \n           {id: 1221, next:\"NE\"}, \n           {id: 1219, next:\"E\"}, \n           {id: 1217, next:\"S\"},\n           {id: 1239, next:\"S\"},\n           {id: 1238, next:\"N\"},\n           {id: 1239, next:\"E\"},\n           {id: 4776, next:\"S\"},\n           {id: 1237, next:\"S\"},\n           {id: 4775, next:\"W\"},\n           {id: 1240, next:\"W\"},\n           {id: 4774, next:\"N\"},\n           {id: 1241, next:\"N\"},\n           {id: 4773, next:\"E\"},\n           {id: 1239, next:\"N\"}],\n    \n    damageThisFight: 0,\n    ttk:             0,\n    targetHealth:    0,\n    interrupt:       false,\n    escaping:        false,\n    color: {\n        notice:  'gold',\n        info:    'yellow',\n        warning: 'red',\n        target:  'orange',\n        heal:    '#6bdaee',\n        xp:      get_variable('color.xp') ? get_variable('color.xp') : 'gold',\n        xpbg:    get_variable('color.xpbg') ? get_variable('color.xpbg') : 'black',\n        config:  'white',\n        slay:    get_variable('color.slay') ? get_variable('color.slay') : 'gold',\n        slaybg:  get_variable('color.slaybg') ? get_variable('color.slaybg') : 'black',\n        damage:  get_variable('color.damage') ? get_variable('color.damage') : 'yellow',\n        dealt:   get_variable('color.dealt') ? get_variable('color.dealt') : 'red',\n    },\n\n//Character\n    class:     '',\n    health:    0,\n    maxHealth: 0,\n    healthPct: 0,\n    useHeal:   get_variable('useHeal'),\n    healReady: true,\n    xpGains:   [],\n    avgXpGain: 0,\n\n//Functions\n    log: function (x, fgcolor, bgcolor) {\n        let type = typeof x\n        switch(type) {\n          case 'number':\n          case 'string':\n          case 'boolean':\n            display_notice(x.toString(), fgcolor, bgcolor)\n            break;\n          case 'object':\n            for (var prop in x) {\n              display_notice(`${prop}: ${x[prop]}`, fgcolor, bgcolor)\n            }\n            break;\n          case 'undefined':\n            display_notice('undefined', fgcolor, bgcolor)\n            break;\n          default:\n            display_notice('wtf is this')\n        }\n    },\n    alert: function (text, fgcolor, bgcolor) {\n        text = text.toUpperCase()\n        let fullText = '-'.repeat(text.length+1) + '-------\\n--  '+ text + '  --\\n-------' + '-'.repeat(text.length+1)\n\n        display_notice(fullText, fgcolor, bgcolor)\n    },\n    debugMessage: function (text) {\n        if (get_variable('debug')) {\n            MSys.log(text, 'white', 'black')\n        }\n    },\n    notice: function(text, fgcolor = MSys.color.notice, bgcolor = 'black') {\n        display_notice(\"[\" + MSys.shortname + \"] \" + text, fgcolor, bgcolor);\n    },\n    loaded: function(text) {\n        //Send implant to browser log for debugging\n        console.log(MSys)\n\n        MSys.notice(text + \"\\n\")\n    },\n    helpbox: function(title,text) {\n        var helptext = \"<div class=\\\"mono\\\"><span style=\\\"color: #ffffff; \\\"><span style=\\\"background-color: #0000a0 \\\">\" + title + \"</span></span></div>\";\n        helptext += \"<div class=\\\"mono\\\">\" + text.replace(\"\\n\",\"</div><div class=\\\"mono\\\">\") + \"</div>\";\n        client.display_help_window(helptext);\n    },\n    toggle: function (variable, name) {\n        if (get_variable(variable)) {\n            set_variable(variable, false)\n            MSys.notice(name + ' Disabled', MSys.color.config)\n            return false;\n        } else {\n            set_variable(variable, true)\n            MSys.useSerrate = true\n            MSys.notice(name + ' Enabled', MSys.color.config)\n            return true;\n        }\n    },\n    stateReset: function() {\n        // Reset all combat variables\n        MSys.ambush             = false\n        MSys.backhand           = false\n        MSys.delaySwarm         = false\n        MSys.escaping           = false\n        MSys.fever              = false\n        MSys.freeze             = false\n        MSys.hypertension       = false\n        MSys.interrupt          = false\n        MSys.magnotronActivated = false\n        MSys.suffocation        = false\n    },\n// Hunting\n    escapeFromCombat: function() {\n        if (!MSys.systemEnabled) {return}\n        MSys.alert('Attempting to escape from combat', 'gold')\n        MSys.offenseEnabled = false\n        MSys.escaping = true\n        send_command('clearqueue')\n        send_command(MSys.flightCommand == undefined ? 'fly' : MSys.flightCommand)\n    },\n    findTarget: function() {\n        var itemList = MSys.itemsInRoom\n        var killList = get_variable('killList')\n        var targetFound = false\n\n        //Match room order\n        if (!MSys.matchList) {\n            for (i=0; i<itemList.length; i++) {\n                for (x=0; x<killList.length; x++) {\n                    if (itemList[i].name.includes(killList[x]) && itemList[i].attrib === 'm' && targetFound === false) {\n                        set_variable('tar', itemList[i].id)\n                        send_command('settarget ' + itemList[i].id)\n                        targetFound = true\n                        MSys.notice('New target: '+itemList[i].name, MSys.color.target, 'black')\n                    }\n                }\n            }\n        } else { //Match priority/list order\n            for (i=0; i<killList.length; i++) {\n                for (x=0; x<itemList.length; x++) {\n                    if (itemList[x].name.includes(killList[i]) && itemList[x].attrib === 'm' && targetFound === false) {\n                        set_variable('tar', itemList[x].id)\n                        send_command('settarget ' + itemList[x].id)\n                        targetFound = true\n                        MSys.notice('New target: '+itemList[x].name, MSys.color.target, 'black')\n                    }\n                }\n            }\n        }\n\n        if (!targetFound) {\n            //MSys.notice('No Target Found', MSys.color.target, 'black')\n            set_variable('tar', '')\n        } else {\n            MSys.walking = false;\n        }\n        \n        MSys.walk();\n    },\n    walk: function() {\n        if (MSys.walking) {\n            if (!MSys.pathIndex || !MSys.path[MSys.pathIndex] || MSys.room.id != MSys.path[MSys.pathIndex].id) {\n                MSys.pathIndex = MSys.path.findIndex((x) => x.id == MSys.room.id)\n                MSys.notice(\"Room found:\" + MSys.pathIndex);\n            }\n        \n            if (MSys.pathIndex >= MSys.path.length) {\n                MSys.pathIndex = 0;\n            }\n            \n            setTimeout(function(){\n    \t        send_command(MSys.path[MSys.pathIndex].next);\n\t            MSys.pathIndex += 1;\n\t\t\t}, 500);\n        }            \n    }\n}\n\nMSys.loaded(\"Starwraith Core Implant v\" + MSys.coreVersion + \" Loaded.\");","items":[]},{"type":"function","name":"onGMCP","enabled":true,"id":3,"code":"// Place any code here you'd like to run when a GMCP message is received\n// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"\n\n//GMCP[args.gmcp_method] = args.gmcp_args\n\n/* ------------------------------------------ CHARACTER STUFF ----------------------------------- */\n\nif (args.gmcp_method == \"Char.Vitals\") {\n\n    // Track health changes\n    var change = MSys.health - args.gmcp_args.hp;\n   \n    if (change > 0) {\n    \tMSys.log('Damage taken: ' + change, MSys.color.damage)\n    } else if (change < 0) {\n        MSys.log('Damage healed: ' + Math.abs(change), MSys.color.heal)\n    }\n    \n    MSys.health = args.gmcp_args.hp\n    MSys.maxHealth = args.gmcp_args.maxhp\n    MSys.healthPct = MSys.health / MSys.maxHealth * 100\n    \n    if (!MSys.offenseEnabled && MSys.healthPct >= get_variable('breakResume')) {\n        MSys.notice('Re-enabling aggression after break')\n        MSys.offenseEnabled = true\n        MSys.findTarget()\n        MSys.huntingAttack()\n    }\n\n    if (MSys.healthPct < get_variable('escapeThreshold') && !MSys.escaping) {\n        MSys.escapeFromCombat()\n\t}\n    \n    // Check class\n    if (!MSys.class || MSys.class != args.gmcp_args.class) {\n        MSys.class = args.gmcp_args.class\n    }\n    \n    // Track XP changes\n    var change = args.gmcp_args.xp - MSys.xp;\n   \n    if (change > 0 && MSys.showXP) {\n    \tMSys.log('XP gained: ' + change, MSys.color.xp, MSys.color.xpbg)\n\n        var now = new Date()\n        \n        // Add new value\n        MSys.xpGains.push({xp: change, time: now})\n\n        // Remove old values\n        MSys.xpGains = MSys.xpGains.filter((t) => now - t.time < 1000*60) // 1 minute\n        \n        // Caclulate average\n        MSys.avgXpGain = MSys.xpGains.reduce((acc, add) => acc + add.xp, 0)\n\n    } else if (change < 0 && MSys.showXP) {\n        MSys.log('XP lost: ' + Math.abs(change), MSys.color.warning)\n    }\n\n    MSys.level = args.gmcp_args.charstats[0].substring(7)\n    MSys.xp = args.gmcp_args.xp\n    MSys.nl = args.gmcp_args.nl // next level\n    MSys.xpLeft = (MSys.xp / MSys.nl * 100) - MSys.xp\n}\n\n/* -------------------------------------------- ITEMS IN ROOM ----------------------------------- */\n\n//Get Items In Room\nif (args.gmcp_method == \"Char.Items.List\") {\n    MSys.itemsInRoom = args.gmcp_args['items']\n}\n\n//Remove items when items leave\nif (args.gmcp_method == \"Char.Items.Remove\") {\n    let itemLeaving = args.gmcp_args['item']\n    \n    //Find index of item\n    MSys.itemsInRoom = MSys.itemsInRoom.filter(item => item.id !== itemLeaving.id);\n    \n}\n\n//Add items when items enter\nif (args.gmcp_method == \"Char.Items.Add\") {\n    let itemJoining = args.gmcp_args['item']\n    \n    //Find index of item\n    MSys.itemsInRoom.push(itemJoining);\n    \n    if (MSys.systemEnabled === true && !get_variable('tar')) {\n        MSys.findTarget()\n    }\n}\n\n/* -------------------------------------------- PLAYERS IN ROOM ----------------------------------- */\nif (args.gmcp_method == \"Room.Players\") {\n    MSys.playersInRoom = args.gmcp_args\n}\n\n/* --------------------------------------------- HELPERS --------------------------------- */\nif (args.gmcp_method == \"Room.Info\") {\n    if (args.gmcp_args.num) {\n        //MSys.notice(\"Room number:\" + args.gmcp_args.num)\n        MSys.room.id = args.gmcp_args.num;\n    }\n\n    if (MSys.systemEnabled === true) {\n        MSys.findTarget()\n    }\n}\n\nif (args.gmcp_method == \"IRE.Target.Info\") {\n\tMSys.targetHealth = args.gmcp_args['hpperc'].slice(0, -1)\n}\n","items":[]},{"type":"group","name":"Configuration","enabled":true,"id":41,"items":[{"type":"alias","name":"hsetup - Combat Implant Setup","enabled":true,"id":25,"matching":"begins","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.notice(\"Hunting List Commands:\", MSys.color.config)\n\nvar commands = ''\ncommands += 'hsave - Save hunting list to backup\\n'\ncommands += 'hload - Load hunting list from backup\\n'\ncommands += 'hreset - Reset hunting system to factory defaults\\n\\n'\n\ncommands += 'hshow - Show hunting target list\\n'\ncommands += 'hadd <mob> - Add <mob> to hunting list\\n'\ncommands += 'hremove <mob> - Remove <mob> from hunting list\\n'\ncommands += 'hup/down <name> - Move an item up or down on the priority list\\n\\n'\n\ncommands += 'hlist - toggle between using room and list priority\\n'\ncommands += 'hbreak - enable/disable break after kill\\n'\ncommands += 'hxp - show XP information after kill\\n'\ncommands += 'hheal - enable/disable heal\\n'\ncommands += 'h - manual heal command\\n'\n\ncommands += 'hbreakresume <number> - set/disable break/resume threshold\\n'\ncommands += 'hescape <number> - set/disable auto escape threshold\\n'\ncommands += 'hescapeaggre <number> - enable/disable flee on aggro\\n'\n\ncommands += 'hhunt - enable/disable automatic hunting\\n'\n\n\n//commands += 'hattack <attackName> - Change the primary attack that will be auto used.\\n' // Still used? -Oga\n\nMSys.log(commands, MSys.color.config)\n\nMSys.log('Make sure you use \\'config usequeueing on\\'.  Then you can use other attacks to overwrite auto attacks.', MSys.color.config)\n\n// Defaults if not set\nif (get_variable('killList')       == undefined) {set_variable('killList', ['rockhopper'])}\nif (get_variable('debug')          == undefined) {set_variable('debug', false)}\nif (get_variable('matchList')      == undefined) {set_variable('matchList', true)}\nif (get_variable('break')          == undefined) {set_variable('break', true)}\nif (get_variable('showXP')         == undefined) {set_variable('showXP', true)}\nif (get_variable('useHeal')        == undefined) {set_variable('useHeal', true)}\nif (get_variable('useFreeze')      == undefined) {set_variable('useFreeze', false)}\nif (get_variable('useMultistrike') == undefined) {set_variable('useMultistrike', false)}\nif (get_variable('useFrenzy')      == undefined) {set_variable('useFrenzy', false)}\nif (get_variable('useDelay')       == undefined) {set_variable('useDelay', false)}\nif (get_variable('useBerserk')     == undefined) {set_variable('useBerserk', false)}\nif (get_variable('useFever')       == undefined) {set_variable('useFever', false)}\nif (get_variable('useAmbush')      == undefined) {set_variable('useAmbush', false)}\nif (get_variable('useRapidfire')   == undefined) {set_variable('useRapidfire', false)}\n\nMSys.notice(\"Current settings:\", MSys.color.config)\n\nvar settings = ''\nsettings += 'Priority: ' + (get_variable('matchList')==true ? \"List\" : \"Room\") + '\\n'\nsettings += 'Break: ' + (get_variable('break')==true ? \"Will break after kill\" : \"Will continue after kill\") + '\\n'\nsettings += 'Show XP Gains/Loses: ' + get_variable('showXP') + '\\n'\nsettings += 'Heal: ' + get_variable('useHeal') + '\\n'\n\nMSys.log(settings, MSys.color.config)\n"}],"text":"hsetup","items":[]},{"type":"alias","name":"hdebug- Enable/Disable Debug Messages","enabled":true,"id":179,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.debug = MSys.toggle('debug', 'Debug messaging');"}],"text":"hdebug"},{"type":"alias","name":"hsave - Save Hunting List To Backup","enabled":true,"id":15,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"let newSave = get_variable('killList')\nset_variable('killListBackup', newSave)\nclient.gmcp_save_system(true)\nMSys.notice('Hunt List Saved\\nSaved settings to server', MSys.color.config)"}],"text":"hsave","items":[]},{"type":"alias","name":"hload - Load Hunting List From Backup","enabled":true,"id":16,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"let backupList = get_variable('killListBackup')\nset_variable('killList', backupList)\nMSys.notice('Hunt List Loaded from Backup', MSys.color.config)"}],"text":"hload","items":[]},{"type":"alias","name":"hreset - System Reset","enabled":true,"id":126,"matching":"regexp","whole_words":false,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.notice('Hunting settings have been reset to factory settings.', MSys.color.config)\nMSys.notice('If you have previously backed up your kill list you may use \\'hload\\' to reload it', MSys.color.config)\n\nset_variable('killList', ['rockhopper'])\nset_variable('debug', false)\nset_variable('useFreeze', false)\nset_variable('useMultistrike', false)\nset_variable('useFrenzy', false)\nset_variable('useDelay', false)\nset_variable('useBerserk', false)\nset_variable('useFever', false)\nset_variable('useAmbush', false)\nset_variable('useRapidfire', false)\nset_variable('useHeal', true)\nset_variable('matchList', true)\nset_variable('break', true)"}],"text":"^hreset$","items":[]},{"type":"alias","name":"hshow - Show Hunting Targets","enabled":true,"id":17,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.notice(\"Hunting list:\", MSys.color.config)\nlet killList = get_variable('killList')\nfor (i=0; i<killList.length; i++) {\n\tdisplay_notice(killList[i], 'white', 'black')\n}"}],"text":"hshow","items":[]},{"type":"alias","name":"hadd <mob> - Add to hunting list","enabled":true,"id":13,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.notice('Adding: ' + args[1] + ' to list', MSys.color.config)\nlet newList = get_variable('killList')\nnewList.push(args[1])\nset_variable('killList', newList)"}],"text":"hadd (.+)","items":[]},{"type":"alias","name":"hremove <mob> - Remove from hunting list","enabled":true,"id":14,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.notice('Removing: ' + args[1] + ' from list', MSys.color.config)\n\nlet newList = get_variable('killList')\nnewList = newList.filter(item => item !== args[1]);\n\nset_variable('killList', newList)"}],"text":"hremove (.+)","items":[]},{"type":"alias","name":"hup/hdown <mob> - Item Priority","enabled":true,"id":52,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.notice(\"Hunting list:\", MSys.color.config)\n\nvar list = get_variable('killList')\nvar nameIndex = list.indexOf(args[2])\nvar name = list[nameIndex]\n\nif (list[nameIndex-1] && nameIndex && args[1] === 'hup') {\n\tlist[nameIndex] = list[nameIndex - 1]\n    list[nameIndex-1] = name\n} else if (list[nameIndex+1] && nameIndex && args[1] === 'hdown') {\n    list[nameIndex] = list[nameIndex + 1]\n    list[nameIndex+1] = name\n}\n\nset_variable('killList', list)\n\nfor (i=0; i<list.length; i++) {\n\tif(list[i] === name){\n    \tdisplay_notice(list[i], 'gold', 'black')\n    } else {\n    \tdisplay_notice(list[i])\n    }\n}"}],"text":"^(hup|hdown) (.+)$","items":[]},{"type":"alias","name":"hlist - Enable/Disable List Mode","enabled":true,"id":56,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('matchList')) {\n    MSys.matchList = false\n    set_variable('matchList', false)\n    MSys.notice('Will match room listing', MSys.color.config)\n} else {\n\tMSys.matchList = true\n    set_variable('matchList', true)\n    MSys.notice('Will match priority listing', MSys.color.config)\n}"}],"text":"hlist","items":[]},{"type":"alias","name":"hbreak - Enable/Disable Break After Kill Mode","enabled":true,"id":82,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.break = MSys.toggle('break', 'Stopping after kill');"}],"text":"hbreak","items":[]},{"type":"alias","name":"hbreakresume <n> - Enable/Disable Break Resume","enabled":true,"id":169,"matching":"regexp","whole_words":false,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (args[1] == '') {\n    MSys.notice('Unset resume')\n    delete_variable('breakResume')\n} else if (args[1] > 100 || args[1] < 1) {\n    MSys.notice('Usage: hbreakresume <n> with n between 1 and 100')\n} else {\n\tset_variable('breakResume', args[1])\n\tMSys.breakResume = args[1]\n    MSys.notice('Will resume combat when health reaches ' + args[1] + ' percent')\n}"}],"text":"^hbreakresume ?([0-9]*)$","items":[]},{"type":"alias","name":"hescape <n> - Enable/Disable Auto-escape","enabled":true,"id":176,"matching":"regexp","whole_words":false,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (args[1] == '') {\n    MSys.notice('Unset auto escape')\n    delete_variable('escapeThreshold')\n} else if (args[1] > 100 || args[1] < 1) {\n    MSys.notice('Usage: hescape <n> with n between 1 and 100')\n} else {\n\tset_variable('escapeThreshold', args[1])\n\tMSys.escapeThreshold = args[1]\n    MSys.notice('Will attempt to escape combat when health is below ' + args[1] + ' percent')\n}"}],"text":"^hescape ?([0-9]*)$"},{"type":"alias","name":"hescapeaggro - Enable/Disable Flee on Aggro","enabled":true,"id":177,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.useEscapeAggro = MSys.toggle('useEscapeAggro', 'Attempt to flee on aggro');"}],"text":"hescapeaggro"},{"type":"alias","name":"hheal - Heal Toggle","enabled":true,"id":81,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.useHeal = MSys.toggle('useHeal', 'Heal');"}],"text":"hheal","items":[]},{"type":"alias","name":"hxp - XP Toggle","enabled":true,"id":170,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.showXP = MSys.useHeal = MSys.toggle('showXP', 'Show XP');"}],"text":"hxp","items":[]},{"type":"alias","name":"h - Heal","enabled":true,"id":115,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (MSys.class == 'Nanoseer') {\n  send_command('NANO REPAIR')\n} else if (MSys.class == 'Fury') {\n  send_command('KITH SUFFUSE')\n} else if (MSys.class == 'Scoundrel') {\n  send_command('STIM')\n} else if (MSys.class == 'B.E.A.S.T.') {\n  send_command('SUIT SUPPORT')\n} else if (MSys.class == 'Engineer') {\n  send_command('OPERATE STIMJECTOR')\n}"}],"text":"h","items":[]},{"type":"alias","name":"hattack - Change Auto Attack","enabled":true,"id":26,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.attack = args[1] + ' '\nset_variable('huntingAttack', args[1] + ' ')\nMSys.notice('Attack set to: ' + args[1], 'white', 'black')"}],"text":"hattack (.+)","items":[]},{"type":"alias","name":"hhunt - Toggle automatic hunting mode","enabled":true,"id":183,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.hunt = MSys.toggle('hunt', 'Automatic Hunt Mode');"}],"text":"hhunt"}],"actions":[]},{"type":"group","name":"Combat","enabled":true,"id":8,"items":[{"type":"group","name":"Escaping","enabled":true,"id":173,"items":[{"type":"trigger","name":"Flying","enabled":true,"id":174,"matching":"regexp","whole_words":false,"case_sensitive":true,"text":"^Reaching the mid elevation","actions":[{"action":"script","script":"MSys.escaping = false"}]},{"type":"trigger","name":"Cannot Fly Indoors","enabled":true,"id":175,"matching":"regexp","whole_words":false,"case_sensitive":true,"text":"^Flying indoors would be a very bad idea.$","actions":[{"action":"script","script":"// if escaping and cannot fly crash out"}]}],"actions":[]},{"type":"group","name":"Interrupts","enabled":true,"id":147,"items":[{"type":"trigger","name":"Super - Interrupt","enabled":true,"id":148,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^Throwing back its grizzled head, a sly cania lets out a high-pitched, wavering howl.$|^A sluggish atzaparaki shakes off some of its torpor and draws in a deep breath, its sides beginning to swell alarmingly.$|^Light begins to focus deep within the body of a salt-crusted quartz creeper, growing to an almost painful radiance.$|^Staggering backwards, shoulder joint grinding, a crystal-clawed rock giant draws back one of its massive, stony limbs, preparing to swing it.$","actions":[{"action":"script","script":"if (!MSys.escaping) {\n    MSys.interrupt = true\n    MSys.notice('Interrupting super', 'white', 'darkblue')\n    MSys.huntingAttack()\n} else {\n\tMSys.notice('Incoming super, prioritizing escape!', 'pink', 'darkblue')\n}"}],"items":[]},{"type":"trigger","name":"Super - Interrupted","enabled":true,"id":172,"matching":"regexp","whole_words":false,"case_sensitive":true,"text":"loses .* concentration.$|^A crane-armed carrybot swings its arm","actions":[{"action":"script","script":"MSys.interrupt = false\nMSys.notice('Attack interrupted', 'white', 'darkblue')\nMSys.huntingAttack()"}]}],"actions":[]},{"type":"trigger","name":"Crash - AUTO OFF","enabled":true,"id":18,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You prepare to crash out of the room.*$","actions":[{"action":"script","script":"MSys.systemEnabled = false\ndisplay_notice('AUTO OFF', 'white', 'black')"}],"items":[]},{"type":"trigger","name":"Slain","enabled":true,"id":5,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(You) have slain a.*$|^.*has been slain by (.+)\\.$","actions":[{"action":"script","script":"MSys.stateReset()\n//Abilities below reset on slain, but not while walking\nMSys.frenzy       = false\nMSys.negation     = false\nMSys.sootheNeeded = true\n\n//var a = new Audio('https://freesound.org/people/adcbicycle/sounds/13934/download/13934__adcbicycle__6.wav')\n//a.play()\n\nvar autoList = ['You', 'Chronoxi Starwraith', 'Feraluna Starwraith', 'Mee', 'Casimar', 'Albion', 'Mykel']\nvar onList = ''\n\nif (args[1]) {\n\tonList = autoList.includes(args[1])\n} else {\n\tonList = autoList.includes(args[2])\n}\n\nif (MSys.systemEnabled === true && onList) {\n    MSys.targetHealth = 0\n\tMSys.findTarget()\n\n    if (MSys.class == 'Engineer' && get_variable('useQPCBoost')) {\n        send_command('clearqueue')\n        send_command('qpcboost')\n    }\n\n\n    if (MSys.break) {MSys.offenseEnabled = false}\n    \n    MSys.huntingAttack()\n}\n\nvar slainParts = []\nvar now = new Date()\n\nif (MSys.damageThisFight > 0) {\n    slainParts.push(MSys.damageThisFight + ' damage done this fight.');\n}\n\nif (MSys.ttk > 0){\n    slainParts.push('TTK: ' + (now.getTime() - MSys.ttk)/1000 + 's')\n}\n\nif (MSys.damageThisFight > 0 && MSys.ttk > 0) {\n    slainParts.push('DPS: ' + Math.round(MSys.damageThisFight / ((now.getTime() - MSys.ttk)/1000)))\n}\n\nif (MSys.showXP) {\n    slainParts.push('XP left: ' + Math.round(MSys.xpLeft));\n\n    if (MSys.avgXpGain > 0) {\n        slainParts.push('XP/min: ' + Math.round(MSys.avgXpGain))\n\n        slainParts.push('Min left:' + Math.round(MSys.xpLeft/MSys.avgXpGain));\n    }\n}\n\nvar msg = slainParts.join(' | ');\n\nMSys.notice(msg, MSys.color.slay, MSys.color.slaybg)\n\nMSys.ttk = 0\nMSys.damageThisFight = 0\nMSys.interrupt = false"}],"items":[]},{"type":"trigger","name":"Under Attack","enabled":true,"id":171,"matching":"regexp","whole_words":false,"case_sensitive":true,"text":"^(.*) moves in to attack you.$","actions":[{"action":"script","script":"MSys.alert('Being attacked by: ' + args[1], 'Red')\n//set_variable('tar', args[1])\nif (MSys.health < MSys.maxHealth && MSys.useEscapeAggro) {\n    MSys.escapeFromCombat()\n} else {\n    MSys.notice('Initating counterattack')\n    MSys.findTarget()\n    MSys.offenseEnabled = true\n    MSys.huntingAttack()\n}"}]},{"type":"trigger","name":"You Died","enabled":true,"id":178,"matching":"regexp","whole_words":false,"case_sensitive":true,"text":"^You collapse to the ground, killed by","actions":[{"action":"script","script":"MSys.stateReset()"}]},{"type":"trigger","name":"Recover balance","enabled":true,"id":182,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"You have recovered your balance.","actions":[{"action":"script","script":"if (MSys.systemEnabled && MSys.hunt && !MSys.walking && MSys.pathIndex != -1 && get_variable('tar')=='') {\n\tsend_command(\"startwalk\")\n}"}]}],"actions":[]},{"type":"group","name":"Generic","enabled":true,"id":4,"items":[{"type":"trigger","name":"Add Damage Per Kill","enabled":true,"id":57,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"Damage Dealt: (.+) .+","actions":[{"action":"script","script":"if (MSys.ttk == 0) {\n    var now = new Date()\n    MSys.ttk = now.getTime()\n}\nMSys.damageThisFight += parseInt(args[1])\n\ncolorize_current_line(0, args['input'].length, MSys.color.dealt, 'black')"}],"items":[]},{"type":"trigger","name":"Hide Queue","enabled":false,"id":7,"matching":"regexp","whole_words":false,"case_sensitive":false,"text":"^\\[Queue\\]: You will attempt to do.*$|^Your swarm is already focused upon a multistrike.*$","actions":[{"action":"gag"}],"items":[]},{"type":"trigger","name":"Not following","enabled":true,"id":87,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"(.+) is no longer following you.","actions":[{"action":"script","script":"MSys.log(args[1] + ' Stopped Following!', 'darkred')"}],"items":[]},{"type":"trigger","name":"Left battle","enabled":true,"id":6,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You are no longer in the throes of battle.","actions":[{"action":"highlight","highlight":"match","highlight_backref":"1","highlight_fg":"#9488f6","highlight_bg":"#000000"},{"action":"script","script":"MSys.stateReset()"}],"items":[]},{"type":"alias","name":"Crash + Direction - c<dir>","enabled":true,"id":33,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"send_command('cq')\nsend_command('crash ' + args[1])"}],"text":"c(nw|ne|se|sw|n|s|e|w|u|d|in|out)","items":[]},{"type":"alias","name":"Javascript - js","enabled":true,"id":31,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.log(eval(args[1]))"}],"text":"^js (.+)$","items":[]},{"type":"alias","name":"Kill","enabled":true,"id":120,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (get_variable('debug') == true) {MSys.log('I am attacking ' + get_variable('tar'), 'white')}\nMSys.systemEnabled = true\nMSys.offenseEnabled = true\nMSys.huntingAttack()"}],"text":"k","items":[]},{"type":"alias","name":"Target call - tt <name>","enabled":false,"id":67,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"MSys.target = args[1]\nset_variable('tar', args[1])\nsend_command('st ' + args[1])\n//send_command('crt Target: ' + args[1])"}],"text":"tt (.+)","items":[]},{"type":"keybind","name":"","enabled":true,"id":10,"key":96,"actions":[{"action":"script","script":"if (get_variable('debug') == true) {MSys.log('I am attacking ' + get_variable('tar'), 'white')}\nMSys.systemEnabled = true\nMSys.offenseEnabled = true\nMSys.huntingAttack()"}],"key_alt":false,"key_ctrl":false,"key_shift":false,"items":[]},{"type":"keybind","name":"","enabled":true,"id":32,"key":111,"actions":[{"action":"script","script":"if (MSys.systemEnabled === true) {\n  MSys.systemEnabled = false\n  display_notice(\"Combat implant disabled\", 'white', 'black')\n} else {\n  MSys.systemEnabled = true\n  display_notice(\"Combat implant enabled\", 'white', 'black')\n}"}],"key_alt":false,"key_ctrl":false,"key_shift":false,"items":[]}],"actions":[]},{"type":"function","name":"startwalk","enabled":true,"id":181,"code":"MSys.walking = true\nsend_command(\"LOOK\")"}],"description":"MSysCore v1.5"}