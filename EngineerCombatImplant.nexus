{
    "type": "group",
    "name": "starwraith engineer combat implant",
    "enabled": true,
    "id": 1,
    "items": [
        {
            "type": "function",
            "name": "onLoad",
            "enabled": true,
            "id": 2,
            "code": "// Changelog
// 20190113T1503EST: Copied main system to separate class systems

// Place any code here you'd like to autorun when the system is loaded
send_command('wakeup')
SECI = {
// Core Implant Code
    noticecolor: 'gold',
    packagename: 'starwraith engineer combat implant',
    shortname: 'SECI',
    notice: function(text) {
        display_notice(\"[\" + this.shortname + \"] \" + text, this.noticecolor);
    },
    loaded: function() {
        //Send implant to browser log for debugging
        console.log(this)
        this.notice(\"Starwraith Engineer Combat Implant v1.0 Loaded. Good hunting, and good death.\\n\");
    },
    helpbox: function(title,text) {
        var helptext = \"<div class=\\\"mono\\\"><span style=\\\"color: #ffffff; \\\"><span style=\\\"background-color: #0000a0 \\\">\" + title + \"</span></span></div>\";
        helptext += \"<div class=\\\"mono\\\">\" + text.replace(\"\\n\",\"</div><div class=\\\"mono\\\">\") + \"</div>\";
        client.display_help_window(helptext);
    },
    disableGroup: function(name) {
        var group = reflex_find_by_name('group', name, false, false, this.packagename)
        reflex_disable(group)
    },
    enableGroup: function(name) {
        var group = reflex_find_by_name('group', name, false, false, this.packagename)
        reflex_enable(group)
    },
    log: function (x, fgcolor, bgcolor) {
        let type = typeof x
        switch(type) {
          case 'number':
          case 'string':
          case 'boolean':
            display_notice(x.toString(), fgcolor, bgcolor)
            break;
          case 'object':
            for (var prop in x) {
              display_notice(`${prop}: ${x[prop]}`, fgcolor, bgcolor)
            }
            break;
          case 'undefined':
            display_notice('undefined', fgcolor, bgcolor)
            break;
          default:
            display_notice('wtf is this')
        }
    },
    alert: function (text, fgcolor, bgcolor) {
        text = text.toUpperCase()
        let fullText = '-'.repeat(text.length+1) + '-------\\n--  '+ text + '  --\\n-------' + '-'.repeat(text.length+1)
        display_notice(fullText, fgcolor, bgcolor)
    },
    debugMessage: function (text) {
        if (get_variable('debug')) {
            this.log(text, 'white', 'black')
        }
    },
//System Variables
    goal: 'hunt2',
    matchList: get_variable('matchList'),
    systemEnabled: true,
    offenseEnabled: false,
    break: get_variable('break'),
    itemsInRoom: [],
    damageThisFight: 0,
    ttk: 0,
    targetHealth: 0,
    interrupt: false,
//Character    
    attack: get_variable('huntingAttack') + ' ',
    class: '',
    health: 0,
    maxHealth: 0,
    useHeal: get_variable('useHeal'),
    healReady: true,
//Engineer
    parts: 0,
    repeat: true,
    wormDeployed: false,
//Combat functions 
    findTarget: function() {
        var itemList = this.itemsInRoom
        var killList = get_variable('killList')
        var targetFound = false
        
        //Match room order
        if (!this.matchList) {
            for (i=0; i<itemList.length; i++) {
                for (x=0; x<killList.length; x++) {
                    if (itemList[i].name.includes(killList[x]) && itemList[i].attrib === 'm' && targetFound === false) {
                        set_variable('tar', itemList[i].id)
                        send_command('settarget ' + itemList[i].id)
                        targetFound = true
                        display_notice('New target: '+itemList[i].name, 'red', 'black')
                    }
                }
            }
        } else { //Match priority/list order
            for (i=0; i<killList.length; i++) {
                for (x=0; x<itemList.length; x++) {
                    if (itemList[x].name.includes(killList[i]) && itemList[x].attrib === 'm' && targetFound === false) {
                        set_variable('tar', itemList[x].id)
                        send_command('settarget ' + itemList[x].id)
                        targetFound = true
                        display_notice('New target: '+itemList[x].name, 'red', 'black')
                    }
                }
            }
        }

        if (!targetFound) {
            //display_notice('No Target Found', 'red', 'black')
            set_variable('tar', '')
        }
    },
    huntingAttack: function() {
        
        if (!this.systemEnabled) {return}
        var command = ''
        
        //Engineer
        if (this.health / this.maxHealth < .8 && this.healReady && this.useHeal) {
            this.debugMessage('Activating stimjector')
            send_command('operate stimjector')
                
        }else if (get_variable('tar') == '' || this.offenseEnabled == false) {
            return;
                
        }else if (!this.repeat && get_variable('useRepeat') && get_variable('repeatAttack') != '') {
            this.debugMessage('Initiating repeat')
            command =  'bot repeat '
            command += get_variable('engineerRepeatAttack')
            command += ' '

        } else if (get_variable('useWorm') && this.targetHealth > 0.7 && !this.wormDeployed) {
            this.debugMessage('Executing burrowbot worm attack')
            command = 'bot worm '

        } else if (get_variable('useRelease') && this.wormDeployed && this.targetHealth < 0.3) {
            this.debugMessage('Releasing burrowbot')
            command = 'bot release '
        } else {
            this.debugMessage('Executing default engineer attack')
            command = 'bot claw '
        }
            
        this.debugMessage('Attempting command: ' + command) 
        command += get_variable('tar')
        send_command(command)
    }
}

SECI.loaded();",
            "items": []
        },
        {
            "type": "function",
            "name": "onGMCP",
            "enabled": true,
            "id": 3,
            "code": "// Place any code here you'd like to run when a GMCP message is received
// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"

GMCP[args.gmcp_method] = args.gmcp_args

/* ------------------------------------------ CHARACTER STUFF ----------------------------------- */

if (args.gmcp_method == \"Char.Vitals\") {

    // Track health changes
    var change = SECI.health - args.gmcp_args.hp;
   
    if (change > 0) {
        SECI.log('Damage taken: ' + change, 'yellow')
    } else if (change < 0) {
        SECI.log('Damage healed: ' + Math.abs(change), '#6bdaee')
    }
    
    SECI.health = args.gmcp_args.hp
    SECI.maxHealth = args.gmcp_args.maxhp

    // Engineer
    SECI.parts = args.gmcp_args.pt
}

/* ----------------------------------- DEFENCES AND BUFFS --------------------------------------- */

//if (args.gmcp_method == 'Char.Defences.Add') {
    //if (args.gmcp_args.name == 'Oblivion: Conqueror')  {
    //    SECI.empyreal = 'Conqueror'
    //}
//}

/* -------------------------------------------- ITEMS IN ROOM ----------------------------------- */

//Get Items In Room
if (args.gmcp_method == \"Char.Items.List\") {
    SECI.itemsInRoom = args.gmcp_args['items']
}

//Remove items when items leave
if (args.gmcp_method == \"Char.Items.Remove\") {
    let itemLeaving = args.gmcp_args['item']
    
    //Find index of item
    SECI.itemsInRoom = SECI.itemsInRoom.filter(item => item.id !== itemLeaving.id);
    
}

//Add items when items enter
if (args.gmcp_method == \"Char.Items.Add\") {
    let itemJoining = args.gmcp_args['item']
    
    //Find index of item
    SECI.itemsInRoom.push(itemJoining);
    
    if (SECI.systemEnabled === true && !get_variable('tar')) {
        SECI.findTarget()
    }
}

/* -------------------------------------------- PLAYERS IN ROOM ----------------------------------- */
if (args.gmcp_method == \"Room.Players\") {
    SECI.playersInRoom = args.gmcp_args
}

/* --------------------------------------------- HELPERS --------------------------------- */
if (args.gmcp_method == \"Room.Info\") {
    if (SECI.systemEnabled === true) {
        SECI.findTarget()
    }
}

if (args.gmcp_method == \"IRE.Target.Info\") {
    SECI.targetHealth = args.gmcp_args['hpperc'].slice(0, -1)
}
",
            "items": []
        },
        {
            "type": "group",
            "name": "Auto Hunt",
            "enabled": true,
            "id": 8,
            "items": [
                {
                    "type": "group",
                    "name": "Setup",
                    "enabled": true,
                    "id": 41,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Combat Implant Setup - hsetup",
                            "enabled": true,
                            "id": 25,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SECI.log('-- Hunting List Setup.  Use \\'hsave\\' to keep a backup.  \\'hload\\' will load your backup.', 'white', 'black')
SECI.log('-- Use \\'hadd\\' <name> to add to the list and \\'hremove\\' <name> to remove items from this list. \\'hshow\\' will show the items on your list.', 'white', 'black')
SECI.log('-- Use \\'hattack\\' <attackName> to make it your primary attack that will be auto used.', 'white')
SECI.log('-- Use \\'hlist\\' to switch between room and priority list. Use \\'hup\\' or \\'hdown\\' <name> to increase or decrease an item on the priority list.', 'white')
SECI.log('-- Make sure you use \\'config usequeueing on\\'.  Then you can use other attacks to overwrite auto attacks.', 'white')

if (get_variable('killList')       == undefined) {set_variable('killList', ['rockhopper'])}
if (get_variable('debug')          == undefined) {set_variable('debug', false)}
if (get_variable('matchList')      == undefined) {set_variable('matchList', true)}
if (get_variable('break')          == undefined) {set_variable('break', true)}
if (get_variable('useHeal')        == undefined) {set_variable('useHeal', true)}
if (get_variable('useFreeze')      == undefined) {set_variable('useFreeze', false)}
if (get_variable('useMultistrike') == undefined) {set_variable('useMultistrike', false)}
if (get_variable('useFrenzy')      == undefined) {set_variable('useFrenzy', false)}
if (get_variable('useDelay')       == undefined) {set_variable('useDelay', false)}
if (get_variable('useBerserk')     == undefined) {set_variable('useBerserk', false)}
if (get_variable('useFever')       == undefined) {set_variable('useFever', false)}
if (get_variable('useAmbush')      == undefined) {set_variable('useAmbush', false)}
if (get_variable('useRapidfire')   == undefined) {set_variable('useRapidfire', false)}"
                                }
                            ],
                            "text": "hsetup",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "System Reset",
                            "enabled": true,
                            "id": 126,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SECI.log('-- Combat Implant has been reset to factory settings.', 'white', 'black')
SECI.log('-- If you have previously backed up your kill list you may use \\'hload\\' to reload it', 'white', 'black')

set_variable('killList', ['rockhopper'])
set_variable('debug', false)
set_variable('useFreeze', false)
set_variable('useMultistrike', false)
set_variable('useFrenzy', false)
set_variable('useDelay', false)
set_variable('useBerserk', false)
set_variable('useFever', false)
set_variable('useAmbush', false)
set_variable('useRapidfire', false)
set_variable('useHeal', true)
set_variable('matchList', true)
set_variable('break', true)"
                                }
                            ],
                            "text": "^hreset$",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Change Auto Attack",
                            "enabled": true,
                            "id": 26,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SECI.attack = args[1] + ' '
set_variable('huntingAttack', args[1] + ' ')
display_notice('Attack set to: ' + args[1], 'white', 'black')"
                                }
                            ],
                            "text": "hattack (.+)",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable List Mode - hlist",
                            "enabled": true,
                            "id": 56,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('matchList')) {
    SECI.matchList = false
    set_variable('matchList', false)
    SECI.log('Will match room listing', 'white')
} else {
    SECI.matchList = true
    set_variable('matchList', true)
    SECI.log('Will match priority listing', 'white')
}"
                                }
                            ],
                            "text": "hlist",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Break After Kill Mode - hbreak",
                            "enabled": true,
                            "id": 82,
                            "matching": "begins",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('break')) {
    SECI.break = false
    set_variable('break', false)
    SECI.log('Will continue after kill.', 'white')
} else {
    SECI.break = true
    set_variable('break', true)
    SECI.log('Will break after kill.', 'white')
}"
                                }
                            ],
                            "text": "hbreak",
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Enable/Disable Break Threshold",
                            "enabled": true,
                            "id": 169,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "set_variable('breakThreshold', args[1])
SECI.breakThreshold = args[1]"
                                }
                            ],
                            "text": "^hbreakthreshold ([0-9]*)$"
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Slain",
                    "enabled": true,
                    "id": 5,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^(You) have slain a.*$|^.*has been slain by (.+)\\.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.freeze = false
SECI.frenzy = false
SECI.negation = false
SECI.delaySwarm = false
SECI.fever = false
SECI.hypertension = false
SECI.ambush = false
SECI.backhand = false

//var a = new Audio('https://freesound.org/people/adcbicycle/sounds/13934/download/13934__adcbicycle__6.wav')
//a.play()

var autoList = ['You', 'Chronoxi Starwraith', 'Feraluna Starwraith', 'Mee', 'Casimar', 'Albion', 'Mykel']
var onList = ''

if (args[1]) {
    onList = autoList.includes(args[1])
} else {
    onList = autoList.includes(args[2])
}

if (SECI.systemEnabled === true && onList) {
    SECI.targetHealth = 0
    send_command('clearqueue')
    SECI.findTarget()

    if (SECI.class == 'Engineer' && get_variable('useQPCBoost')) {
        send_command('qpcboost')
    }

    if (SECI.break) {
        SECI.offenseEnabled = false
    }
    
    SECI.huntingAttack()
}

var slainMessage = ''
var now = new Date()
if (SECI.damageThisFight > 0 && SECI.ttk > 0){
    slainMessage = SECI.damageThisFight + ' damage done this fight. | TTK: ' + (now.getTime() - SECI.ttk)/1000 + 's | DPS: ' + Math.round(SECI.damageThisFight / ((now.getTime() - SECI.ttk)/1000))
} else if (SECI.damageThisFight > 0) {
    slainMessage = SECI.damageThisFight + ' damage done this fight.'
} else if (SECI.ttk > 0) {
    slainMessage = 'TTK: ' + (now.getTime() - SECI.ttk)/1000 + 's'
}

if (SECI.damageThisFight > 0 || SECI.ttk > 0){
    SECI.alert(slainMessage, 'lightgreen', 'darkblue')
}

SECI.ttk = 0
SECI.damageThisFight = 0
SECI.interrupt = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Crash - AUTO OFF",
                    "enabled": true,
                    "id": 18,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^You prepare to crash out of the room.*$|^\\[Queue\\]: You will attempt to do CRASH .{1,4} when you recover balance.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.systemEnabled = false
display_notice('AUTO OFF', 'white', 'black')"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 10,
                    "key": 96,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('debug') == true) {SECI.log('I am attacking ' + get_variable('tar'), 'white')}
SECI.systemEnabled = true
SECI.offenseEnabled = true
SECI.huntingAttack()"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "keybind",
                    "name": "",
                    "enabled": true,
                    "id": 32,
                    "key": 111,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SECI.systemEnabled === true) {
  SECI.systemEnabled = false
  display_notice(\"Combat implant disabled\", 'white', 'black')
} else {
  SECI.systemEnabled = true
  display_notice(\"Combat implant enabled\", 'white', 'black')
}"
                        }
                    ],
                    "key_alt": false,
                    "key_ctrl": false,
                    "key_shift": false,
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Heal",
                    "enabled": true,
                    "id": 115,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SECI.class == 'Nanoseer') {
  send_command('NANO REPAIR')
} else if (SECI.class == 'Fury') {
  send_command('KITH SUFFUSE')
} else if (SECI.class == 'Scoundrel') {
  send_command('STIM')
} else if (SECI.class == 'B.E.A.S.T.') {
  send_command('suit support')
} else if (SECI.class == 'Engineer') {
  send_command('operate stimjector')
}"
                        }
                    ],
                    "text": "h",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Add to hunting list - hadd <mob>",
                    "enabled": true,
                    "id": 13,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "display_notice('Adding: ' + args[1] + ' to list', 'white', 'black')
let newList = get_variable('killList')
newList.push(args[1])
set_variable('killList', newList)"
                        }
                    ],
                    "text": "hadd (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Remove from hunting list - hremove <mob>",
                    "enabled": true,
                    "id": 14,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "display_notice('Removing: ' + args[1] + ' from list', 'white', 'black')

let newList = get_variable('killList')
newList = newList.filter(item => item !== args[1]);

set_variable('killList', newList)"
                        }
                    ],
                    "text": "hremove (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Save Hunting List To Backup - hsave",
                    "enabled": true,
                    "id": 15,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let newSave = get_variable('killList')
set_variable('killListBackup', newSave)
display_notice('Hunt List Saved', 'white', 'black')
"
                        }
                    ],
                    "text": "hsave",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Load Hunting List From Backup - hload",
                    "enabled": true,
                    "id": 16,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let backupList = get_variable('killListBackup')
set_variable('killList', backupList)
display_notice('Hunt List Loaded from Backup', 'white', 'black')"
                        }
                    ],
                    "text": "hload",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Show Hunting Targets - hshow",
                    "enabled": true,
                    "id": 17,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "let killList = get_variable('killList')
for (i=0; i<killList.length; i++) {
    display_notice(killList[i], 'white', 'black')
}"
                        }
                    ],
                    "text": "hshow",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Item Priority - hup/hdown <mob>",
                    "enabled": true,
                    "id": 52,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var list = get_variable('killList')
var nameIndex = list.indexOf(args[2])
var name = list[nameIndex]

if (list[nameIndex-1] && nameIndex && args[1] === 'hup') {
    list[nameIndex] = list[nameIndex - 1]
    list[nameIndex-1] = name
} else if (list[nameIndex+1] && nameIndex && args[1] === 'hdown') {
    list[nameIndex] = list[nameIndex + 1]
    list[nameIndex+1] = name
}

set_variable('killList', list)

for (i=0; i<list.length; i++) {
    if(list[i] === name){
        display_notice(list[i], 'gold', 'black')
    } else {
        display_notice(list[i])
    }
}"
                        }
                    ],
                    "text": "^(hup|hdown) (.+)$",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Heal Toggle - hheal",
                    "enabled": true,
                    "id": 81,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useHeal')) {
    set_variable('useHeal', false)
    SECI.useHeal = false
    SECI.log('HEAL OFF', 'white')
} else {
    set_variable('useHeal', true)
    SECI.useHeal = true
    SECI.log('HEAL ON', 'white')
}"
                        }
                    ],
                    "text": "hheal",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Kill",
                    "enabled": true,
                    "id": 120,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('debug') == true) {SECI.log('I am attacking ' + get_variable('tar'), 'white')}
SECI.systemEnabled = true
SECI.offenseEnabled = true
SECI.huntingAttack()"
                        }
                    ],
                    "text": "k",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Generic",
            "enabled": true,
            "id": 4,
            "items": [
                {
                    "type": "group",
                    "name": "Interrupts",
                    "enabled": true,
                    "id": 147,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Super - Interrupt",
                            "enabled": true,
                            "id": 148,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^Throwing back its grizzled head, a sly cania lets out a high-pitched, wavering howl.$|^A sluggish atzaparaki shakes off some of its torpor and draws in a deep breath, its sides beginning to swell alarmingly.$|^Light begins to focus deep within the body of a salt-crusted quartz creeper, growing to an almost painful radiance.$",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SECI.interrupt = true

SECI.alert('interrupting super', 'white', 'blue')
SECI.huntingAttack()
"
                                }
                            ],
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Travel",
                    "enabled": true,
                    "id": 149,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Battlemaster Engineer Return",
                            "enabled": true,
                            "id": 125,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "A tripod-mounted wormhole generator has been set up in the center of the cracked landing pad.",
                            "actions": [
                                {
                                    "action": "linkify",
                                    "linkify": "match",
                                    "linkify_backref": "1",
                                    "linkify_text_type": "capture",
                                    "linkify_text": "",
                                    "linkify_command_type": "value",
                                    "linkify_command": "turn tripod&push tripod",
                                    "linkify_color": "#26aa95"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Battlemaster Engineer Omni",
                            "enabled": true,
                            "id": 124,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "A tripod-mounted wormhole generator has been set up in the center of the repair bay.",
                            "actions": [
                                {
                                    "action": "linkify",
                                    "linkify": "match",
                                    "linkify_backref": "1",
                                    "linkify_text_type": "capture",
                                    "linkify_text": "",
                                    "linkify_command_type": "value",
                                    "linkify_command": "turn tripod&push tripod",
                                    "linkify_color": "#26aa95"
                                }
                            ],
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Left battle",
                    "enabled": true,
                    "id": 6,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You are no longer in the throes of battle.",
                    "actions": [
                        {
                            "action": "highlight",
                            "highlight": "match",
                            "highlight_backref": "1",
                            "highlight_fg": "#9488f6",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Hide Queue",
                    "enabled": false,
                    "id": 7,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^\\[Queue\\]: You will attempt to do.*$|^Your swarm is already focused upon a multistrike.*$",
                    "actions": [
                        {
                            "action": "gag"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Add Damage Per Kill",
                    "enabled": true,
                    "id": 57,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "Damage Dealt: (.+) .+",
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (SECI.ttk == 0) {
    var now = new Date()
    SECI.ttk = now.getTime()
}
SECI.damageThisFight += parseInt(args[1])"
                        },
                        {
                            "action": "highlight",
                            "highlight": "match",
                            "highlight_backref": "1",
                            "highlight_fg": "#ff0000",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Not following",
                    "enabled": true,
                    "id": 87,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "(.+) is no longer following you.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.log(args[1] + ' Stopped Following!', 'darkred')"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Crash + Direction - c<dir>",
                    "enabled": true,
                    "id": 33,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "send_command('cq')
send_command('crash ' + args[1])"
                        }
                    ],
                    "text": "c(nw|ne|se|sw|n|s|e|w|u|d|in|out)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Javascript - js",
                    "enabled": true,
                    "id": 31,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.log(eval(args[1]))"
                        }
                    ],
                    "text": "^js (.+)$",
                    "items": []
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Engineer",
            "enabled": true,
            "id": 109,
            "items": [
                {
                    "type": "group",
                    "name": "Turret Construction",
                    "enabled": true,
                    "id": 129,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Construct Turret",
                            "enabled": true,
                            "id": 128,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (args[1] == '' || args[2] == '') {
    SECI.log('Usage: hturret <mod> <weapon> <follow up command>', 'darkyellow')
} else {
    set_variable('turretMod', args[1])
    set_variable('turretWeapon', args[2])
    set_variable('turretFollowup', args[3])
    set_variable('turretAlias', true)
    send_command('turret construct turret')
}
"
                                }
                            ],
                            "text": "hturret ([a-z]+) ([a-z]+)[ ]?(.*)",
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Frame Constructed",
                            "enabled": true,
                            "id": 130,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Circuitboards, robotic servos, power sources, and an operating system come together under your capable hands to form a modular weapons turret",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('turretAlias') == true) {
    send_command('turret install ' + get_variable('turretWeapon'))
}"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Weapon Mounted",
                            "enabled": true,
                            "id": 131,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Smoothly, you socket the .* barrel|That barrel is already installed on the turret",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('turretAlias') != true) {return;}

if (get_variable('turretMod').toUpperCase() == 'QPC') {
    send_command('gadget construct qpc')
} else {
    send_command('turret mod ' + get_variable('turretMod'))
    if (get_variable('turretFollowup') != '') {send_command(get_variable('turretFollowup'))}
    set_variable('turretAlias', false)
    SECI.log('Turret ready!', 'white')
}"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "Mod Mounted",
                            "enabled": true,
                            "id": 133,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Metal ratchets satisfyingly into place and code whirrs down",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('turretAlias') != true) {return;}
send_command(get_variable('turretFollowup'))
set_variable('turretAlias', false)
SECI.log('Turret ready!', 'white')"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "trigger",
                            "name": "QPC Ready",
                            "enabled": true,
                            "id": 132,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "text": "^Using your vast engineering knowledge, you effortlessly construct a cylindrical quantum power cell",
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "if (get_variable('turretAlias') != true) {
    return;
} else if (get_variable('turretMod').toUpperCase() == 'QPC') {
    send_command('turret mod qpc')
}"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Deploy Sentry Turret",
                            "enabled": true,
                            "id": 134,
                            "matching": "regexp",
                            "whole_words": false,
                            "case_sensitive": false,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "send_command('turret deploy ' + args[1])"
                                },
                                {
                                    "action": "waitfor",
                                    "text": "Dropping a turret with a mounted flamethrower barrel",
                                    "matching": "substring",
                                    "whole_words": false,
                                    "case_sensitive": false,
                                    "expire": "10"
                                },
                                {
                                    "action": "command",
                                    "command": "workstation deploy",
                                    "prefix_suffix": false
                                },
                                {
                                    "action": "waitfor",
                                    "text": "You fold down the legs of your workstation",
                                    "matching": "substring",
                                    "whole_words": false,
                                    "case_sensitive": false,
                                    "expire": "10"
                                },
                                {
                                    "action": "command",
                                    "command": "turret sentrymode",
                                    "prefix_suffix": true
                                },
                                {
                                    "action": "waitfor",
                                    "text": "Fingers whirring across the holokeyboard",
                                    "matching": "substring",
                                    "whole_words": false,
                                    "case_sensitive": false,
                                    "expire": "10"
                                },
                                {
                                    "action": "command",
                                    "command": "workstation pack",
                                    "prefix_suffix": true
                                }
                            ],
                            "text": "^deploysentry[ ]?([0-9]*)$",
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "group",
                    "name": "Utility",
                    "enabled": true,
                    "id": 136,
                    "items": [
                        {
                            "type": "trigger",
                            "name": "Airdrop Return",
                            "enabled": true,
                            "id": 123,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "text": "^An aerodynamic drone flies in, decelerating rapidly. It drops a supply of spare parts into your hands.$",
                            "actions": [
                                {
                                    "action": "highlight",
                                    "highlight": "line",
                                    "highlight_backref": "1",
                                    "highlight_fg": "#00c7ff",
                                    "highlight_bg": "#000000"
                                },
                                {
                                    "action": "script",
                                    "script": "if (get_variable('refillParts') == true) {
    if (SECI.parts < 60) {
        send_command('bot airdrop')
    } else {
        set_variable('refillParts', false)
    }
}"
                                }
                            ],
                            "items": []
                        },
                        {
                            "type": "alias",
                            "name": "Refill Parts",
                            "enabled": true,
                            "id": 127,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "set_variable('refillParts', true)
send_command('bot airdrop')
"
                                }
                            ],
                            "text": "^hfillParts$",
                            "items": []
                        }
                    ],
                    "actions": []
                },
                {
                    "type": "trigger",
                    "name": "Stimjector Used",
                    "enabled": true,
                    "id": 111,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You activate your stimjector, feeling a rush of vitality as it releases healing nanites into your bloodstream.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.healReady = false"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Stimjector Ready",
                    "enabled": true,
                    "id": 112,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "You can again use a stimjector.",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.healReady = true
SECI.huntingAttack()
//SECI.log('stimjector ready', 'cyan')"
                        },
                        {
                            "action": "highlight",
                            "highlight": "line",
                            "highlight_backref": "1",
                            "highlight_fg": "#00efff",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Repeat Active",
                    "enabled": true,
                    "id": 137,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You build an instruction loop",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.repeat = false
SECI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Repeat Available",
                    "enabled": true,
                    "id": 138,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^You can again order a repeated attack.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.repeat = true"
                        },
                        {
                            "action": "highlight",
                            "highlight": "line",
                            "highlight_backref": "1",
                            "highlight_fg": "#fbbe80",
                            "highlight_bg": "#000000"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Burrowbot Active",
                    "enabled": true,
                    "id": 139,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "and starts burrowing into its flesh.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.wormDeployed = true
SECI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Burrowbot Returned",
                    "enabled": true,
                    "id": 140,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": false,
                    "text": "^A knife-mawed burrowbot violently emerges|ceases burrowing",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.wormDeployed = false
SECI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Queue Attack Engineer",
                    "enabled": true,
                    "id": 114,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "text": "^A crane-armed carrybot claws .* shredding .* skin.$",
                    "actions": [
                        {
                            "action": "script",
                            "script": "SECI.huntingAttack()"
                        }
                    ],
                    "items": []
                },
                {
                    "type": "trigger",
                    "name": "Turret Unpowered",
                    "enabled": true,
                    "id": 150,
                    "matching": "regexp",
                    "whole_words": false,
                    "case_sensitive": true,
                    "text": "doesn't have enough power to attack.$",
                    "actions": [
                        {
                            "action": "highlight",
                            "highlight": "line",
                            "highlight_backref": "1",
                            "highlight_fg": "#f863df",
                            "highlight_bg": "#000000"
                        }
                    ]
                },
                {
                    "type": "alias",
                    "name": "List Ability Configuration",
                    "enabled": true,
                    "id": 113,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "var abilities = ''
abilities += 'Heal:          ' + get_variable('useHeal') + '\\n'
abilities += 'Repeat Attack: ' + get_variable('engineerRepeatAttack') + '\\n'
abilities += 'Use Repeat:    ' + get_variable('useRepeat') + '\\n'
abilities += 'Repeat Avail:  ' + SECI.repeat + '\\n'
abilities += 'Use Worm:      ' + get_variable('useWorm') + '\\n'
abilities += 'Worm Deployed: ' + SECI.wormDeployed + '\\n'
abilities += 'Use Release:   ' + get_variable('useRelease') + '\\n'
abilities += 'QPC Boost:     ' + get_variable('useQPCBoost') + '\\n'

SECI.log(abilities, 'white')"
                        }
                    ],
                    "text": "hengineer",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Enable/Disable Repeat",
                    "enabled": true,
                    "id": 135,
                    "matching": "regexp",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (args[1] != 'clear') {
    set_variable('engineerRepeatAttack', args[1])
    set_variable('useRepeat', true)
    SECI.log('Enabled bot repeat with attack: ' + args[1], 'white')
} else {
    set_variable('engineerRepeatAttack', '')
    set_variable('useRepeat', false)
    SECI.log('Disabled bot repeat command', 'white')
}"
                        }
                    ],
                    "text": "hrepeat (.+)",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Enable/Disable Worm",
                    "enabled": true,
                    "id": 141,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useWorm')) {
    set_variable('useWorm', false)
    SECI.log('Burrowbot Worm Attack disabled', 'white')
} else {
    set_variable('useWorm', true)
    SECI.log('Burrowbot Worm Attack enabled', 'white')
}"
                        }
                    ],
                    "text": "hworm",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Enable/Disable Worm Release",
                    "enabled": true,
                    "id": 142,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": true,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useRelease')) {
    set_variable('useRelease', false)
    SECI.log('Burrowbot Worm Release Attack disabled', 'white')
} else {
    set_variable('useRelease', true)
    SECI.log('Burrowbot Worm Release Attack enabled', 'white')
}"
                        }
                    ],
                    "text": "hrelease",
                    "items": []
                },
                {
                    "type": "alias",
                    "name": "Enable/Disable QPCBoost",
                    "enabled": true,
                    "id": 151,
                    "matching": "exact",
                    "whole_words": true,
                    "case_sensitive": false,
                    "prefix_suffix": true,
                    "actions": [
                        {
                            "action": "script",
                            "script": "if (get_variable('useQPCBoost')) {
    set_variable('useQPCBoost', false)
    SECI.log('QPC Boost after kill disabled', 'white')
} else {
    set_variable('useQPCBoost', true)
    SECI.log('QPC Boost after kill enabled', 'white')
}"
                        }
                    ],
                    "text": "hqpcboost"
                }
            ],
            "actions": []
        },
        {
            "type": "group",
            "name": "Combat",
            "enabled": true,
            "id": 64,
            "items": [
                {
                    "type": "group",
                    "name": "Chat",
                    "enabled": true,
                    "id": 65,
                    "items": [
                        {
                            "type": "alias",
                            "name": "Target call - tt <name>",
                            "enabled": false,
                            "id": 67,
                            "matching": "regexp",
                            "whole_words": true,
                            "case_sensitive": true,
                            "prefix_suffix": true,
                            "actions": [
                                {
                                    "action": "script",
                                    "script": "SECI.target = args[1]
set_variable('tar', args[1])
send_command('st ' + args[1])
send_command('crt Target: ' + args[1])"
                                }
                            ],
                            "text": "tt (.+)",
                            "items": []
                        }
                    ],
                    "actions": []
                }
            ],
            "actions": []
        }
    ],
    "description": "SECI v1.2"
}